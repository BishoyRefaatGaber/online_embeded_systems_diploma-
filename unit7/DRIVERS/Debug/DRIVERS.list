
DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000814  08000814  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000814  08000814  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08000814  08000814  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000814  08000814  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000814  08000814  00010814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000818  08000818  00010818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800081c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000028  08000844  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08000844  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f47  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ba  00000000  00000000  00020f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000069e  00000000  00000000  00021452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00021af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000e8  00000000  00000000  00021c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002267  00000000  00000000  00021d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bf5  00000000  00000000  00023f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000802c  00000000  00000000  00025b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002db90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000378  00000000  00000000  0002dbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000028 	.word	0x20000028
 800014c:	00000000 	.word	0x00000000
 8000150:	080007fc 	.word	0x080007fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000002c 	.word	0x2000002c
 800016c:	080007fc 	.word	0x080007fc

08000170 <KEYPAD_INIT>:

#include "KEYPAD_DRIVER.h"

int keypad_R [4]= {R0 , R1 , R2 , R3};
int keypad_C [4]= {C0 , C1 , C2 , C3};
void KEYPAD_INIT(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	KEYPAD_COLUMNS_PORT = (KEYPAD_COLUMNS_PORT & ~COLUMNS_PINS) | COLUMNS_PINS;
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <KEYPAD_INIT+0x18>)
 8000176:	68db      	ldr	r3, [r3, #12]
 8000178:	4a03      	ldr	r2, [pc, #12]	; (8000188 <KEYPAD_INIT+0x18>)
 800017a:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 800017e:	60d3      	str	r3, [r2, #12]
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	40010c00 	.word	0x40010c00

0800018c <KEYPAD_GET_CHAR>:
char KEYPAD_GET_CHAR(){
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
	int i,j;
	for (i = 0 ; i < 40 ; i++){
 8000192:	2300      	movs	r3, #0
 8000194:	607b      	str	r3, [r7, #4]
 8000196:	e030      	b.n	80001fa <KEYPAD_GET_CHAR+0x6e>
		wait_ms(10000);
 8000198:	f242 7010 	movw	r0, #10000	; 0x2710
 800019c:	f000 faa6 	bl	80006ec <wait_ms>
		KEYPAD_COLUMNS_PORT = (KEYPAD_COLUMNS_PORT & ~COLUMNS_PINS) | COLUMNS_PINS;
 80001a0:	4b1a      	ldr	r3, [pc, #104]	; (800020c <KEYPAD_GET_CHAR+0x80>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a19      	ldr	r2, [pc, #100]	; (800020c <KEYPAD_GET_CHAR+0x80>)
 80001a6:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 80001aa:	60d3      	str	r3, [r2, #12]
		KEYPAD_COLUMNS_PORT &= (1 << keypad_C[i]);
 80001ac:	4b17      	ldr	r3, [pc, #92]	; (800020c <KEYPAD_GET_CHAR+0x80>)
 80001ae:	68db      	ldr	r3, [r3, #12]
 80001b0:	4917      	ldr	r1, [pc, #92]	; (8000210 <KEYPAD_GET_CHAR+0x84>)
 80001b2:	687a      	ldr	r2, [r7, #4]
 80001b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001b8:	2101      	movs	r1, #1
 80001ba:	fa01 f202 	lsl.w	r2, r1, r2
 80001be:	4611      	mov	r1, r2
 80001c0:	4a12      	ldr	r2, [pc, #72]	; (800020c <KEYPAD_GET_CHAR+0x80>)
 80001c2:	400b      	ands	r3, r1
 80001c4:	60d3      	str	r3, [r2, #12]

		for(j = 0 ; j < 4 ; j++){
 80001c6:	2300      	movs	r3, #0
 80001c8:	603b      	str	r3, [r7, #0]
 80001ca:	e010      	b.n	80001ee <KEYPAD_GET_CHAR+0x62>
			if(!(KEYPAD_ROWS_PIN & (1 << keypad_R[i]))){
 80001cc:	4b0f      	ldr	r3, [pc, #60]	; (800020c <KEYPAD_GET_CHAR+0x80>)
 80001ce:	689b      	ldr	r3, [r3, #8]
 80001d0:	4910      	ldr	r1, [pc, #64]	; (8000214 <KEYPAD_GET_CHAR+0x88>)
 80001d2:	687a      	ldr	r2, [r7, #4]
 80001d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80001d8:	2101      	movs	r1, #1
 80001da:	fa01 f202 	lsl.w	r2, r1, r2
 80001de:	4013      	ands	r3, r2
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d101      	bne.n	80001e8 <KEYPAD_GET_CHAR+0x5c>
			//	while((KEYPAD_ROWS_PIN & (1 << keypad_R[i])));
				return '9';
 80001e4:	2339      	movs	r3, #57	; 0x39
 80001e6:	e00c      	b.n	8000202 <KEYPAD_GET_CHAR+0x76>
		for(j = 0 ; j < 4 ; j++){
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	3301      	adds	r3, #1
 80001ec:	603b      	str	r3, [r7, #0]
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	2b03      	cmp	r3, #3
 80001f2:	ddeb      	ble.n	80001cc <KEYPAD_GET_CHAR+0x40>
	for (i = 0 ; i < 40 ; i++){
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2b27      	cmp	r3, #39	; 0x27
 80001fe:	ddcb      	ble.n	8000198 <KEYPAD_GET_CHAR+0xc>
			}

		}
	}
	return '\0';
 8000200:	2300      	movs	r3, #0
}
 8000202:	4618      	mov	r0, r3
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010c00 	.word	0x40010c00
 8000210:	20000010 	.word	0x20000010
 8000214:	20000000 	.word	0x20000000

08000218 <GOTO_XY>:
	while((LCD_DATA >> BF_PIN) & 1);
}
*/


void GOTO_XY(unsigned char x ,unsigned char y){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	460a      	mov	r2, r1
 8000222:	71fb      	strb	r3, [r7, #7]
 8000224:	4613      	mov	r3, r2
 8000226:	71bb      	strb	r3, [r7, #6]
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	LCD_WRITE_COMMAND(BAISX+x+BAISY*y);
 8000228:	79bb      	ldrb	r3, [r7, #6]
 800022a:	019b      	lsls	r3, r3, #6
 800022c:	b2da      	uxtb	r2, r3
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	4413      	add	r3, r2
 8000232:	b2db      	uxtb	r3, r3
 8000234:	3b80      	subs	r3, #128	; 0x80
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f821 	bl	8000280 <LCD_WRITE_COMMAND>

}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <LCD_INIT>:
}


#ifdef EIGHT_BIT_MODE

void LCD_INIT(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	wait_ms(20);
 800024c:	2014      	movs	r0, #20
 800024e:	f000 fa4d 	bl	80006ec <wait_ms>
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	LCD_CTRL &= ~(1 << EN);
 8000252:	4b0a      	ldr	r3, [pc, #40]	; (800027c <LCD_INIT+0x34>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	4a09      	ldr	r2, [pc, #36]	; (800027c <LCD_INIT+0x34>)
 8000258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800025c:	60d3      	str	r3, [r2, #12]
	LCD_WRITE_COMMAND(LCD_8BITS_2LINES_5X10);
 800025e:	203c      	movs	r0, #60	; 0x3c
 8000260:	f000 f80e 	bl	8000280 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON);
 8000264:	200c      	movs	r0, #12
 8000266:	f000 f80b 	bl	8000280 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_Clear_Display);
 800026a:	2001      	movs	r0, #1
 800026c:	f000 f808 	bl	8000280 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000270:	200f      	movs	r0, #15
 8000272:	f000 f805 	bl	8000280 <LCD_WRITE_COMMAND>
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40010800 	.word	0x40010800

08000280 <LCD_WRITE_COMMAND>:




void LCD_WRITE_COMMAND(unsigned char command){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	LCD_DATA = (LCD_DATA & LCD_INPUT_PINS ) | command;
 800028a:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <LCD_WRITE_COMMAND+0x58>)
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4910      	ldr	r1, [pc, #64]	; (80002d8 <LCD_WRITE_COMMAND+0x58>)
 8000296:	4313      	orrs	r3, r2
 8000298:	60cb      	str	r3, [r1, #12]
	LCD_CTRL = (LCD_CTRL & LCD_WRITE_INSTRUCTION );
 800029a:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <LCD_WRITE_COMMAND+0x58>)
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <LCD_WRITE_COMMAND+0x58>)
 80002a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80002a4:	60d3      	str	r3, [r2, #12]
	wait_ms(1);
 80002a6:	2001      	movs	r0, #1
 80002a8:	f000 fa20 	bl	80006ec <wait_ms>
	LCD_ENABLE;
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <LCD_WRITE_COMMAND+0x58>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <LCD_WRITE_COMMAND+0x58>)
 80002b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002b6:	60d3      	str	r3, [r2, #12]
 80002b8:	2032      	movs	r0, #50	; 0x32
 80002ba:	f000 fa17 	bl	80006ec <wait_ms>
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <LCD_WRITE_COMMAND+0x58>)
 80002c0:	68db      	ldr	r3, [r3, #12]
 80002c2:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <LCD_WRITE_COMMAND+0x58>)
 80002c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002c8:	60d3      	str	r3, [r2, #12]
 80002ca:	20c8      	movs	r0, #200	; 0xc8
 80002cc:	f000 fa0e 	bl	80006ec <wait_ms>

}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40010800 	.word	0x40010800

080002dc <LCD_WRITE_CHAR>:



void LCD_WRITE_CHAR(unsigned char character){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
	static char COUNT_CHAR = 0 ;
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	if(character){
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d028      	beq.n	800033e <LCD_WRITE_CHAR+0x62>
	LCD_DATA = (LCD_DATA & LCD_INPUT_PINS) | character;
 80002ec:	4b21      	ldr	r3, [pc, #132]	; (8000374 <LCD_WRITE_CHAR+0x98>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	491f      	ldr	r1, [pc, #124]	; (8000374 <LCD_WRITE_CHAR+0x98>)
 80002f8:	4313      	orrs	r3, r2
 80002fa:	60cb      	str	r3, [r1, #12]
	LCD_CTRL = ((LCD_CTRL & ~LCD_WRITE_DATA) | LCD_WRITE_DATA);
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <LCD_WRITE_CHAR+0x98>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	4a1c      	ldr	r2, [pc, #112]	; (8000374 <LCD_WRITE_CHAR+0x98>)
 8000302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000306:	60d3      	str	r3, [r2, #12]
	wait_ms(1);
 8000308:	2001      	movs	r0, #1
 800030a:	f000 f9ef 	bl	80006ec <wait_ms>
	LCD_ENABLE;
 800030e:	4b19      	ldr	r3, [pc, #100]	; (8000374 <LCD_WRITE_CHAR+0x98>)
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	4a18      	ldr	r2, [pc, #96]	; (8000374 <LCD_WRITE_CHAR+0x98>)
 8000314:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000318:	60d3      	str	r3, [r2, #12]
 800031a:	2032      	movs	r0, #50	; 0x32
 800031c:	f000 f9e6 	bl	80006ec <wait_ms>
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <LCD_WRITE_CHAR+0x98>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a13      	ldr	r2, [pc, #76]	; (8000374 <LCD_WRITE_CHAR+0x98>)
 8000326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800032a:	60d3      	str	r3, [r2, #12]
 800032c:	20c8      	movs	r0, #200	; 0xc8
 800032e:	f000 f9dd 	bl	80006ec <wait_ms>
	COUNT_CHAR++;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <LCD_WRITE_CHAR+0x9c>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	3301      	adds	r3, #1
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <LCD_WRITE_CHAR+0x9c>)
 800033c:	701a      	strb	r2, [r3, #0]
}
	if (COUNT_CHAR == 15){
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <LCD_WRITE_CHAR+0x9c>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b0f      	cmp	r3, #15
 8000344:	d104      	bne.n	8000350 <LCD_WRITE_CHAR+0x74>
		GOTO_XY(0,1);
 8000346:	2101      	movs	r1, #1
 8000348:	2000      	movs	r0, #0
 800034a:	f7ff ff65 	bl	8000218 <GOTO_XY>
	else if (COUNT_CHAR == 30){
		COUNT_CHAR = 0;
		LCD_WRITE_COMMAND(LCD_Clear_Display);
		GOTO_XY(0,0);
	}
}
 800034e:	e00d      	b.n	800036c <LCD_WRITE_CHAR+0x90>
	else if (COUNT_CHAR == 30){
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <LCD_WRITE_CHAR+0x9c>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b1e      	cmp	r3, #30
 8000356:	d109      	bne.n	800036c <LCD_WRITE_CHAR+0x90>
		COUNT_CHAR = 0;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <LCD_WRITE_CHAR+0x9c>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
		LCD_WRITE_COMMAND(LCD_Clear_Display);
 800035e:	2001      	movs	r0, #1
 8000360:	f7ff ff8e 	bl	8000280 <LCD_WRITE_COMMAND>
		GOTO_XY(0,0);
 8000364:	2100      	movs	r1, #0
 8000366:	2000      	movs	r0, #0
 8000368:	f7ff ff56 	bl	8000218 <GOTO_XY>
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40010800 	.word	0x40010800
 8000378:	20000044 	.word	0x20000044

0800037c <MCAL_GPIO_INIT_PIN>:
* @param[in] - GPIO port
* @param[out] - GPIO pin in the specific port (in the last parameter)
*               takes values @ref GPIO_PinNumber  @ref GPIO_MODE  @ref GPIO_FREQ
*/

void MCAL_GPIO_INIT_PIN(GPIO_T * GPIOx , GPIO_PinConfig_t * PIN_CONFIG){
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
	volatile uint8_t PIN_SELECT ;
	PIN_SELECT = (PIN_CONFIG->GPIO_PinNumber > 7 )? 1 : 0;
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	2b07      	cmp	r3, #7
 800038c:	bf8c      	ite	hi
 800038e:	2301      	movhi	r3, #1
 8000390:	2300      	movls	r3, #0
 8000392:	b2db      	uxtb	r3, r3
 8000394:	72fb      	strb	r3, [r7, #11]
	PIN_SELECT = ((PIN_CONFIG->GPIO_PinNumber - 8 * PIN_SELECT) * GPIO_REGISTER_SIZE);    //GPIO_REGISTER_SIZE exists in GENERIC MACROS in GPIO header
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	461a      	mov	r2, r3
 800039c:	7afb      	ldrb	r3, [r7, #11]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	1ad3      	subs	r3, r2, r3
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	72fb      	strb	r3, [r7, #11]
	volatile uint32_t * REGISTER_SELECT ;
	REGISTER_SELECT = (PIN_CONFIG->GPIO_PinNumber > 7 )? &GPIOx->CRH : &GPIOx->CRL;
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	2b07      	cmp	r3, #7
 80003b2:	d902      	bls.n	80003ba <MCAL_GPIO_INIT_PIN+0x3e>
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3304      	adds	r3, #4
 80003b8:	e000      	b.n	80003bc <MCAL_GPIO_INIT_PIN+0x40>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60fb      	str	r3, [r7, #12]
	*REGISTER_SELECT &= ~(0xf << PIN_SELECT);
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	230f      	movs	r3, #15
 80003c6:	4093      	lsls	r3, r2
 80003c8:	43da      	mvns	r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	401a      	ands	r2, r3
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	601a      	str	r2, [r3, #0]
	*REGISTER_SELECT |= (PIN_CONFIG->GPIO_MODE<<2 | PIN_CONFIG->GPIO_OUTPUT_SPEED) << PIN_SELECT;
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	789b      	ldrb	r3, [r3, #2]
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	683a      	ldr	r2, [r7, #0]
 80003dc:	78d2      	ldrb	r2, [r2, #3]
 80003de:	4313      	orrs	r3, r2
 80003e0:	7afa      	ldrb	r2, [r7, #11]
 80003e2:	b2d2      	uxtb	r2, r2
 80003e4:	fa03 f202 	lsl.w	r2, r3, r2
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	431a      	orrs	r2, r3
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	601a      	str	r2, [r3, #0]
	if(PIN_CONFIG->GPIO_MODE == GPIO_MODE_INPUT_PULLUP){
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	789b      	ldrb	r3, [r3, #2]
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	d10a      	bne.n	8000410 <MCAL_GPIO_INIT_PIN+0x94>
		GPIOx->ODR |= (1 << PIN_CONFIG->GPIO_PinNumber);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	683a      	ldr	r2, [r7, #0]
 8000400:	8812      	ldrh	r2, [r2, #0]
 8000402:	4611      	mov	r1, r2
 8000404:	2201      	movs	r2, #1
 8000406:	408a      	lsls	r2, r1
 8000408:	431a      	orrs	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	60da      	str	r2, [r3, #12]
	}
	else if(PIN_CONFIG->GPIO_MODE == GPIO_MODE_INPUT_PULLDOWN){
		GPIOx->ODR &= ~(1 << PIN_CONFIG->GPIO_PinNumber);
	}

}
 800040e:	e00e      	b.n	800042e <MCAL_GPIO_INIT_PIN+0xb2>
	else if(PIN_CONFIG->GPIO_MODE == GPIO_MODE_INPUT_PULLDOWN){
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	789b      	ldrb	r3, [r3, #2]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d10a      	bne.n	800042e <MCAL_GPIO_INIT_PIN+0xb2>
		GPIOx->ODR &= ~(1 << PIN_CONFIG->GPIO_PinNumber);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	683a      	ldr	r2, [r7, #0]
 800041e:	8812      	ldrh	r2, [r2, #0]
 8000420:	4611      	mov	r1, r2
 8000422:	2201      	movs	r2, #1
 8000424:	408a      	lsls	r2, r1
 8000426:	43d2      	mvns	r2, r2
 8000428:	401a      	ands	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	60da      	str	r2, [r3, #12]
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <init>:
GPIO_PinConfig_t PINB_7 ;
GPIO_PinConfig_t PINB_8 ;
GPIO_PinConfig_t PINB_9 ;
GPIO_PinConfig_t PINB_10 ;

void init(){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();  //enable GPIO CLOCK
 800043c:	4b95      	ldr	r3, [pc, #596]	; (8000694 <init+0x25c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a94      	ldr	r2, [pc, #592]	; (8000694 <init+0x25c>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();  //enable GPIOB CLOCK
 8000448:	4b92      	ldr	r3, [pc, #584]	; (8000694 <init+0x25c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a91      	ldr	r2, [pc, #580]	; (8000694 <init+0x25c>)
 800044e:	f043 0308 	orr.w	r3, r3, #8
 8000452:	6193      	str	r3, [r2, #24]
	//=========================
	//LCD PINS
	//=========================
	PINA_0.GPIO_PinNumber = GPIO_PIN_0;
 8000454:	4b90      	ldr	r3, [pc, #576]	; (8000698 <init+0x260>)
 8000456:	2200      	movs	r2, #0
 8000458:	801a      	strh	r2, [r3, #0]
	PINA_0.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 800045a:	4b8f      	ldr	r3, [pc, #572]	; (8000698 <init+0x260>)
 800045c:	2200      	movs	r2, #0
 800045e:	709a      	strb	r2, [r3, #2]
	PINA_0.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 8000460:	4b8d      	ldr	r3, [pc, #564]	; (8000698 <init+0x260>)
 8000462:	2201      	movs	r2, #1
 8000464:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_0);
 8000466:	4b8d      	ldr	r3, [pc, #564]	; (800069c <init+0x264>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	498b      	ldr	r1, [pc, #556]	; (8000698 <init+0x260>)
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff85 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINA_1.GPIO_PinNumber = GPIO_PIN_1;
 8000472:	4b8b      	ldr	r3, [pc, #556]	; (80006a0 <init+0x268>)
 8000474:	2201      	movs	r2, #1
 8000476:	801a      	strh	r2, [r3, #0]
	PINA_1.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000478:	4b89      	ldr	r3, [pc, #548]	; (80006a0 <init+0x268>)
 800047a:	2200      	movs	r2, #0
 800047c:	709a      	strb	r2, [r3, #2]
	PINA_1.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 800047e:	4b88      	ldr	r3, [pc, #544]	; (80006a0 <init+0x268>)
 8000480:	2201      	movs	r2, #1
 8000482:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_1);
 8000484:	4b85      	ldr	r3, [pc, #532]	; (800069c <init+0x264>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4985      	ldr	r1, [pc, #532]	; (80006a0 <init+0x268>)
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff76 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINA_2.GPIO_PinNumber = GPIO_PIN_2;
 8000490:	4b84      	ldr	r3, [pc, #528]	; (80006a4 <init+0x26c>)
 8000492:	2202      	movs	r2, #2
 8000494:	801a      	strh	r2, [r3, #0]
	PINA_2.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000496:	4b83      	ldr	r3, [pc, #524]	; (80006a4 <init+0x26c>)
 8000498:	2200      	movs	r2, #0
 800049a:	709a      	strb	r2, [r3, #2]
	PINA_2.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 800049c:	4b81      	ldr	r3, [pc, #516]	; (80006a4 <init+0x26c>)
 800049e:	2201      	movs	r2, #1
 80004a0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_2);
 80004a2:	4b7e      	ldr	r3, [pc, #504]	; (800069c <init+0x264>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	497f      	ldr	r1, [pc, #508]	; (80006a4 <init+0x26c>)
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ff67 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINA_3.GPIO_PinNumber = GPIO_PIN_3;
 80004ae:	4b7e      	ldr	r3, [pc, #504]	; (80006a8 <init+0x270>)
 80004b0:	2203      	movs	r2, #3
 80004b2:	801a      	strh	r2, [r3, #0]
	PINA_3.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 80004b4:	4b7c      	ldr	r3, [pc, #496]	; (80006a8 <init+0x270>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	709a      	strb	r2, [r3, #2]
	PINA_3.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 80004ba:	4b7b      	ldr	r3, [pc, #492]	; (80006a8 <init+0x270>)
 80004bc:	2201      	movs	r2, #1
 80004be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_3);
 80004c0:	4b76      	ldr	r3, [pc, #472]	; (800069c <init+0x264>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4978      	ldr	r1, [pc, #480]	; (80006a8 <init+0x270>)
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ff58 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINA_4.GPIO_PinNumber = GPIO_PIN_4;
 80004cc:	4b77      	ldr	r3, [pc, #476]	; (80006ac <init+0x274>)
 80004ce:	2204      	movs	r2, #4
 80004d0:	801a      	strh	r2, [r3, #0]
	PINA_4.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 80004d2:	4b76      	ldr	r3, [pc, #472]	; (80006ac <init+0x274>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	709a      	strb	r2, [r3, #2]
	PINA_4.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 80004d8:	4b74      	ldr	r3, [pc, #464]	; (80006ac <init+0x274>)
 80004da:	2201      	movs	r2, #1
 80004dc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_4);
 80004de:	4b6f      	ldr	r3, [pc, #444]	; (800069c <init+0x264>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4972      	ldr	r1, [pc, #456]	; (80006ac <init+0x274>)
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ff49 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINA_5.GPIO_PinNumber = GPIO_PIN_5;
 80004ea:	4b71      	ldr	r3, [pc, #452]	; (80006b0 <init+0x278>)
 80004ec:	2205      	movs	r2, #5
 80004ee:	801a      	strh	r2, [r3, #0]
	PINA_5.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 80004f0:	4b6f      	ldr	r3, [pc, #444]	; (80006b0 <init+0x278>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	709a      	strb	r2, [r3, #2]
	PINA_5.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 80004f6:	4b6e      	ldr	r3, [pc, #440]	; (80006b0 <init+0x278>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_5);
 80004fc:	4b67      	ldr	r3, [pc, #412]	; (800069c <init+0x264>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	496b      	ldr	r1, [pc, #428]	; (80006b0 <init+0x278>)
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff3a 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINA_6.GPIO_PinNumber = GPIO_PIN_6;
 8000508:	4b6a      	ldr	r3, [pc, #424]	; (80006b4 <init+0x27c>)
 800050a:	2206      	movs	r2, #6
 800050c:	801a      	strh	r2, [r3, #0]
	PINA_6.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 800050e:	4b69      	ldr	r3, [pc, #420]	; (80006b4 <init+0x27c>)
 8000510:	2200      	movs	r2, #0
 8000512:	709a      	strb	r2, [r3, #2]
	PINA_6.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 8000514:	4b67      	ldr	r3, [pc, #412]	; (80006b4 <init+0x27c>)
 8000516:	2201      	movs	r2, #1
 8000518:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_6);
 800051a:	4b60      	ldr	r3, [pc, #384]	; (800069c <init+0x264>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4965      	ldr	r1, [pc, #404]	; (80006b4 <init+0x27c>)
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff2b 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINA_7.GPIO_PinNumber = GPIO_PIN_7;
 8000526:	4b64      	ldr	r3, [pc, #400]	; (80006b8 <init+0x280>)
 8000528:	2207      	movs	r2, #7
 800052a:	801a      	strh	r2, [r3, #0]
	PINA_7.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 800052c:	4b62      	ldr	r3, [pc, #392]	; (80006b8 <init+0x280>)
 800052e:	2200      	movs	r2, #0
 8000530:	709a      	strb	r2, [r3, #2]
	PINA_7.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 8000532:	4b61      	ldr	r3, [pc, #388]	; (80006b8 <init+0x280>)
 8000534:	2201      	movs	r2, #1
 8000536:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_7);
 8000538:	4b58      	ldr	r3, [pc, #352]	; (800069c <init+0x264>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	495e      	ldr	r1, [pc, #376]	; (80006b8 <init+0x280>)
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff1c 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINA_8.GPIO_PinNumber = GPIO_PIN_8;
 8000544:	4b5d      	ldr	r3, [pc, #372]	; (80006bc <init+0x284>)
 8000546:	2208      	movs	r2, #8
 8000548:	801a      	strh	r2, [r3, #0]
	PINA_8.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 800054a:	4b5c      	ldr	r3, [pc, #368]	; (80006bc <init+0x284>)
 800054c:	2200      	movs	r2, #0
 800054e:	709a      	strb	r2, [r3, #2]
	PINA_8.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 8000550:	4b5a      	ldr	r3, [pc, #360]	; (80006bc <init+0x284>)
 8000552:	2201      	movs	r2, #1
 8000554:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_8);
 8000556:	4b51      	ldr	r3, [pc, #324]	; (800069c <init+0x264>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4958      	ldr	r1, [pc, #352]	; (80006bc <init+0x284>)
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ff0d 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINA_9.GPIO_PinNumber = GPIO_PIN_9;
 8000562:	4b57      	ldr	r3, [pc, #348]	; (80006c0 <init+0x288>)
 8000564:	2209      	movs	r2, #9
 8000566:	801a      	strh	r2, [r3, #0]
	PINA_9.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000568:	4b55      	ldr	r3, [pc, #340]	; (80006c0 <init+0x288>)
 800056a:	2200      	movs	r2, #0
 800056c:	709a      	strb	r2, [r3, #2]
	PINA_9.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 800056e:	4b54      	ldr	r3, [pc, #336]	; (80006c0 <init+0x288>)
 8000570:	2201      	movs	r2, #1
 8000572:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_9);
 8000574:	4b49      	ldr	r3, [pc, #292]	; (800069c <init+0x264>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4951      	ldr	r1, [pc, #324]	; (80006c0 <init+0x288>)
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fefe 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINA_10.GPIO_PinNumber = GPIO_PIN_10;
 8000580:	4b50      	ldr	r3, [pc, #320]	; (80006c4 <init+0x28c>)
 8000582:	220a      	movs	r2, #10
 8000584:	801a      	strh	r2, [r3, #0]
	PINA_10.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000586:	4b4f      	ldr	r3, [pc, #316]	; (80006c4 <init+0x28c>)
 8000588:	2200      	movs	r2, #0
 800058a:	709a      	strb	r2, [r3, #2]
	PINA_10.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 800058c:	4b4d      	ldr	r3, [pc, #308]	; (80006c4 <init+0x28c>)
 800058e:	2201      	movs	r2, #1
 8000590:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_10);
 8000592:	4b42      	ldr	r3, [pc, #264]	; (800069c <init+0x264>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	494b      	ldr	r1, [pc, #300]	; (80006c4 <init+0x28c>)
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff feef 	bl	800037c <MCAL_GPIO_INIT_PIN>
	//=========================
	//KEYPAD PINS
	//=========================

	//COLUMNS
	PINB_3.GPIO_PinNumber = GPIO_PIN_3;
 800059e:	4b4a      	ldr	r3, [pc, #296]	; (80006c8 <init+0x290>)
 80005a0:	2203      	movs	r2, #3
 80005a2:	801a      	strh	r2, [r3, #0]
	PINB_3.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 80005a4:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <init+0x290>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	709a      	strb	r2, [r3, #2]
	PINB_3.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 80005aa:	4b47      	ldr	r3, [pc, #284]	; (80006c8 <init+0x290>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_B , &PINB_3);
 80005b0:	4b46      	ldr	r3, [pc, #280]	; (80006cc <init+0x294>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4944      	ldr	r1, [pc, #272]	; (80006c8 <init+0x290>)
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff fee0 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINB_4.GPIO_PinNumber = GPIO_PIN_4;
 80005bc:	4b44      	ldr	r3, [pc, #272]	; (80006d0 <init+0x298>)
 80005be:	2204      	movs	r2, #4
 80005c0:	801a      	strh	r2, [r3, #0]
	PINB_4.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 80005c2:	4b43      	ldr	r3, [pc, #268]	; (80006d0 <init+0x298>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	709a      	strb	r2, [r3, #2]
	PINB_4.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 80005c8:	4b41      	ldr	r3, [pc, #260]	; (80006d0 <init+0x298>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_B , &PINB_4);
 80005ce:	4b3f      	ldr	r3, [pc, #252]	; (80006cc <init+0x294>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	493f      	ldr	r1, [pc, #252]	; (80006d0 <init+0x298>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fed1 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINB_5.GPIO_PinNumber = GPIO_PIN_5;
 80005da:	4b3e      	ldr	r3, [pc, #248]	; (80006d4 <init+0x29c>)
 80005dc:	2205      	movs	r2, #5
 80005de:	801a      	strh	r2, [r3, #0]
	PINB_5.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 80005e0:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <init+0x29c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	709a      	strb	r2, [r3, #2]
	PINB_5.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 80005e6:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <init+0x29c>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_B , &PINB_5);
 80005ec:	4b37      	ldr	r3, [pc, #220]	; (80006cc <init+0x294>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4938      	ldr	r1, [pc, #224]	; (80006d4 <init+0x29c>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fec2 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINB_6.GPIO_PinNumber = GPIO_PIN_6;
 80005f8:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <init+0x2a0>)
 80005fa:	2206      	movs	r2, #6
 80005fc:	801a      	strh	r2, [r3, #0]
	PINB_6.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <init+0x2a0>)
 8000600:	2200      	movs	r2, #0
 8000602:	709a      	strb	r2, [r3, #2]
	PINB_6.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 8000604:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <init+0x2a0>)
 8000606:	2201      	movs	r2, #1
 8000608:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_B , &PINB_6);
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <init+0x294>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4932      	ldr	r1, [pc, #200]	; (80006d8 <init+0x2a0>)
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff feb3 	bl	800037c <MCAL_GPIO_INIT_PIN>

	//ROWS
	PINB_7.GPIO_PinNumber = GPIO_PIN_7;
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <init+0x2a4>)
 8000618:	2207      	movs	r2, #7
 800061a:	801a      	strh	r2, [r3, #0]
	PINB_7.GPIO_MODE = GPIO_MODE_INPUT_PULLUP;
 800061c:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <init+0x2a4>)
 800061e:	2202      	movs	r2, #2
 8000620:	709a      	strb	r2, [r3, #2]
	PINB_7.GPIO_OUTPUT_SPEED = GPIO_FREQ_IN;
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <init+0x2a4>)
 8000624:	2200      	movs	r2, #0
 8000626:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_B , &PINB_7);
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <init+0x294>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	492b      	ldr	r1, [pc, #172]	; (80006dc <init+0x2a4>)
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fea4 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINB_8.GPIO_PinNumber = GPIO_PIN_8;
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <init+0x2a8>)
 8000636:	2208      	movs	r2, #8
 8000638:	801a      	strh	r2, [r3, #0]
	PINB_8.GPIO_MODE = GPIO_MODE_INPUT_PULLUP;
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <init+0x2a8>)
 800063c:	2202      	movs	r2, #2
 800063e:	709a      	strb	r2, [r3, #2]
	PINB_8.GPIO_OUTPUT_SPEED = GPIO_FREQ_IN;
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <init+0x2a8>)
 8000642:	2200      	movs	r2, #0
 8000644:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_B , &PINB_8);
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <init+0x294>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4925      	ldr	r1, [pc, #148]	; (80006e0 <init+0x2a8>)
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fe95 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINB_9.GPIO_PinNumber = GPIO_PIN_9;
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <init+0x2ac>)
 8000654:	2209      	movs	r2, #9
 8000656:	801a      	strh	r2, [r3, #0]
	PINB_9.GPIO_MODE = GPIO_MODE_INPUT_PULLUP;
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <init+0x2ac>)
 800065a:	2202      	movs	r2, #2
 800065c:	709a      	strb	r2, [r3, #2]
	PINB_9.GPIO_OUTPUT_SPEED = GPIO_FREQ_IN;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <init+0x2ac>)
 8000660:	2200      	movs	r2, #0
 8000662:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_B , &PINB_9);
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <init+0x294>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	491e      	ldr	r1, [pc, #120]	; (80006e4 <init+0x2ac>)
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fe86 	bl	800037c <MCAL_GPIO_INIT_PIN>

	PINB_10.GPIO_PinNumber = GPIO_PIN_10;
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <init+0x2b0>)
 8000672:	220a      	movs	r2, #10
 8000674:	801a      	strh	r2, [r3, #0]
	PINB_10.GPIO_MODE = GPIO_MODE_INPUT_PULLUP;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <init+0x2b0>)
 8000678:	2202      	movs	r2, #2
 800067a:	709a      	strb	r2, [r3, #2]
	PINB_10.GPIO_OUTPUT_SPEED = GPIO_FREQ_IN;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <init+0x2b0>)
 800067e:	2200      	movs	r2, #0
 8000680:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_B , &PINB_10);
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <init+0x294>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4918      	ldr	r1, [pc, #96]	; (80006e8 <init+0x2b0>)
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fe77 	bl	800037c <MCAL_GPIO_INIT_PIN>

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	20000048 	.word	0x20000048
 800069c:	20000020 	.word	0x20000020
 80006a0:	2000004c 	.word	0x2000004c
 80006a4:	20000050 	.word	0x20000050
 80006a8:	20000054 	.word	0x20000054
 80006ac:	20000058 	.word	0x20000058
 80006b0:	2000005c 	.word	0x2000005c
 80006b4:	20000060 	.word	0x20000060
 80006b8:	20000064 	.word	0x20000064
 80006bc:	20000068 	.word	0x20000068
 80006c0:	2000006c 	.word	0x2000006c
 80006c4:	20000070 	.word	0x20000070
 80006c8:	20000074 	.word	0x20000074
 80006cc:	20000024 	.word	0x20000024
 80006d0:	20000078 	.word	0x20000078
 80006d4:	2000007c 	.word	0x2000007c
 80006d8:	20000080 	.word	0x20000080
 80006dc:	20000084 	.word	0x20000084
 80006e0:	20000088 	.word	0x20000088
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	20000090 	.word	0x20000090

080006ec <wait_ms>:

void wait_ms(uint32_t time){
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	uint32_t i=0,j=0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
	for(; i < time ; i++){
 80006fc:	e008      	b.n	8000710 <wait_ms+0x24>
		for (; j < 255 ; j++);
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	3301      	adds	r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	2bfe      	cmp	r3, #254	; 0xfe
 8000708:	d9f9      	bls.n	80006fe <wait_ms+0x12>
	for(; i < time ; i++){
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3301      	adds	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	d3f5      	bcc.n	8000704 <wait_ms+0x18>
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <main>:



int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	init();
 800072a:	f7ff fe85 	bl	8000438 <init>
	LCD_INIT();
 800072e:	f7ff fd8b 	bl	8000248 <LCD_INIT>
	KEYPAD_INIT();
 8000732:	f7ff fd1d 	bl	8000170 <KEYPAD_INIT>
	uint8_t key;
	while(1){

		key = KEYPAD_GET_CHAR();
 8000736:	f7ff fd29 	bl	800018c <KEYPAD_GET_CHAR>
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
		switch( key)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00a      	beq.n	800075a <main+0x36>
 8000744:	2b21      	cmp	r3, #33	; 0x21
 8000746:	d103      	bne.n	8000750 <main+0x2c>
		{
		case  ('\0'): break; //No Key Pressed
		case  ('!'):  LCD_WRITE_COMMAND(LCD_Clear_Display);break;
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff fd99 	bl	8000280 <LCD_WRITE_COMMAND>
 800074e:	e005      	b.n	800075c <main+0x38>
		default: LCD_WRITE_CHAR(key);break;
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fdc2 	bl	80002dc <LCD_WRITE_CHAR>
 8000758:	e000      	b.n	800075c <main+0x38>
		case  ('\0'): break; //No Key Pressed
 800075a:	bf00      	nop
		key = KEYPAD_GET_CHAR();
 800075c:	e7eb      	b.n	8000736 <main+0x12>
	...

08000760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000762:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000764:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <LoopForever+0x6>)
  ldr r1, =_edata
 800076a:	490d      	ldr	r1, [pc, #52]	; (80007a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <LoopForever+0xe>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000780:	4c0a      	ldr	r4, [pc, #40]	; (80007ac <LoopForever+0x16>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078e:	f000 f811 	bl	80007b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000792:	f7ff ffc7 	bl	8000724 <main>

08000796 <LoopForever>:

LoopForever:
    b LoopForever
 8000796:	e7fe      	b.n	8000796 <LoopForever>
  ldr   r0, =_estack
 8000798:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80007a4:	0800081c 	.word	0x0800081c
  ldr r2, =_sbss
 80007a8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80007ac:	20000094 	.word	0x20000094

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <__libc_init_array>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	2600      	movs	r6, #0
 80007b8:	4d0c      	ldr	r5, [pc, #48]	; (80007ec <__libc_init_array+0x38>)
 80007ba:	4c0d      	ldr	r4, [pc, #52]	; (80007f0 <__libc_init_array+0x3c>)
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	10a4      	asrs	r4, r4, #2
 80007c0:	42a6      	cmp	r6, r4
 80007c2:	d109      	bne.n	80007d8 <__libc_init_array+0x24>
 80007c4:	f000 f81a 	bl	80007fc <_init>
 80007c8:	2600      	movs	r6, #0
 80007ca:	4d0a      	ldr	r5, [pc, #40]	; (80007f4 <__libc_init_array+0x40>)
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <__libc_init_array+0x44>)
 80007ce:	1b64      	subs	r4, r4, r5
 80007d0:	10a4      	asrs	r4, r4, #2
 80007d2:	42a6      	cmp	r6, r4
 80007d4:	d105      	bne.n	80007e2 <__libc_init_array+0x2e>
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007dc:	4798      	blx	r3
 80007de:	3601      	adds	r6, #1
 80007e0:	e7ee      	b.n	80007c0 <__libc_init_array+0xc>
 80007e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e6:	4798      	blx	r3
 80007e8:	3601      	adds	r6, #1
 80007ea:	e7f2      	b.n	80007d2 <__libc_init_array+0x1e>
 80007ec:	08000814 	.word	0x08000814
 80007f0:	08000814 	.word	0x08000814
 80007f4:	08000814 	.word	0x08000814
 80007f8:	08000818 	.word	0x08000818

080007fc <_init>:
 80007fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fe:	bf00      	nop
 8000800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000802:	bc08      	pop	{r3}
 8000804:	469e      	mov	lr, r3
 8000806:	4770      	bx	lr

08000808 <_fini>:
 8000808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080a:	bf00      	nop
 800080c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800080e:	bc08      	pop	{r3}
 8000810:	469e      	mov	lr, r3
 8000812:	4770      	bx	lr
