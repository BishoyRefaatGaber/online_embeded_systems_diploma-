
DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ad4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000c04  08000c04  00010c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c2c  08000c2c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000c2c  08000c2c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c2c  08000c2c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c2c  08000c2c  00010c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c30  08000c30  00010c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000004  08000c38  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08000c38  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001326  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000058d  00000000  00000000  00021353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000008fa  00000000  00000000  000218e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  000221e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000140  00000000  00000000  00022368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000a2d  00000000  00000000  000224a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001eda  00000000  00000000  00022ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009ea6  00000000  00000000  00024daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002ec55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004c8  00000000  00000000  0002eca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bec 	.word	0x08000bec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000bec 	.word	0x08000bec

08000170 <GOTO_XY>:
	while((LCD_DATA >> BF_PIN) & 1);
}
*/


void GOTO_XY(unsigned char x ,unsigned char y){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	LCD_WRITE_COMMAND(BAISX+x+BAISY*y);
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	019b      	lsls	r3, r3, #6
 8000184:	b2da      	uxtb	r2, r3
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4413      	add	r3, r2
 800018a:	b2db      	uxtb	r3, r3
 800018c:	3b80      	subs	r3, #128	; 0x80
 800018e:	b2db      	uxtb	r3, r3
 8000190:	4618      	mov	r0, r3
 8000192:	f000 f815 	bl	80001c0 <LCD_WRITE_COMMAND>

}
 8000196:	bf00      	nop
 8000198:	3708      	adds	r7, #8
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}

0800019e <LCD_INIT>:
}


#ifdef EIGHT_BIT_MODE

void LCD_INIT(void){
 800019e:	b580      	push	{r7, lr}
 80001a0:	af00      	add	r7, sp, #0

	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	LCD_WRITE_COMMAND(LCD_8BITS_2LINES_5X10);
 80001a2:	203c      	movs	r0, #60	; 0x3c
 80001a4:	f000 f80c 	bl	80001c0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON);
 80001a8:	200c      	movs	r0, #12
 80001aa:	f000 f809 	bl	80001c0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_Clear_Display);
 80001ae:	2001      	movs	r0, #1
 80001b0:	f000 f806 	bl	80001c0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80001b4:	200f      	movs	r0, #15
 80001b6:	f000 f803 	bl	80001c0 <LCD_WRITE_COMMAND>
}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
	...

080001c0 <LCD_WRITE_COMMAND>:




void LCD_WRITE_COMMAND(unsigned char command){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	LCD_CTRL = (LCD_CTRL & LCD_WRITE_INSTRUCTION );
 80001ca:	4b13      	ldr	r3, [pc, #76]	; (8000218 <LCD_WRITE_COMMAND+0x58>)
 80001cc:	68db      	ldr	r3, [r3, #12]
 80001ce:	4a12      	ldr	r2, [pc, #72]	; (8000218 <LCD_WRITE_COMMAND+0x58>)
 80001d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80001d4:	60d3      	str	r3, [r2, #12]
	LCD_DATA = (LCD_DATA & LCD_INPUT_PINS ) | command;
 80001d6:	4b10      	ldr	r3, [pc, #64]	; (8000218 <LCD_WRITE_COMMAND+0x58>)
 80001d8:	68db      	ldr	r3, [r3, #12]
 80001da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	490d      	ldr	r1, [pc, #52]	; (8000218 <LCD_WRITE_COMMAND+0x58>)
 80001e2:	4313      	orrs	r3, r2
 80001e4:	60cb      	str	r3, [r1, #12]
	wait_ms(1);
 80001e6:	2001      	movs	r0, #1
 80001e8:	f000 fc66 	bl	8000ab8 <wait_ms>
	LCD_ENABLE;
 80001ec:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <LCD_WRITE_COMMAND+0x58>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <LCD_WRITE_COMMAND+0x58>)
 80001f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f6:	60d3      	str	r3, [r2, #12]
 80001f8:	2032      	movs	r0, #50	; 0x32
 80001fa:	f000 fc5d 	bl	8000ab8 <wait_ms>
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <LCD_WRITE_COMMAND+0x58>)
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	4a05      	ldr	r2, [pc, #20]	; (8000218 <LCD_WRITE_COMMAND+0x58>)
 8000204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000208:	60d3      	str	r3, [r2, #12]
 800020a:	20c8      	movs	r0, #200	; 0xc8
 800020c:	f000 fc54 	bl	8000ab8 <wait_ms>

}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40010800 	.word	0x40010800

0800021c <LCD_WRITE_STRING>:
}




void LCD_WRITE_STRING(char* string){
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	unsigned char i = 0 , COUNT_STRING = 1 ;
 8000224:	2300      	movs	r3, #0
 8000226:	73fb      	strb	r3, [r7, #15]
 8000228:	2301      	movs	r3, #1
 800022a:	73bb      	strb	r3, [r7, #14]
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	while(string[i]){
 800022c:	e03d      	b.n	80002aa <LCD_WRITE_STRING+0x8e>
		LCD_CTRL = ((LCD_CTRL & ~LCD_WRITE_DATA) | LCD_WRITE_DATA);
 800022e:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <LCD_WRITE_STRING+0xa4>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4a23      	ldr	r2, [pc, #140]	; (80002c0 <LCD_WRITE_STRING+0xa4>)
 8000234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000238:	60d3      	str	r3, [r2, #12]
		LCD_DATA = (LCD_DATA & LCD_INPUT_PINS) | string[i];
 800023a:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <LCD_WRITE_STRING+0xa4>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000242:	7bfa      	ldrb	r2, [r7, #15]
 8000244:	6879      	ldr	r1, [r7, #4]
 8000246:	440a      	add	r2, r1
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	4611      	mov	r1, r2
 800024c:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <LCD_WRITE_STRING+0xa4>)
 800024e:	430b      	orrs	r3, r1
 8000250:	60d3      	str	r3, [r2, #12]
		LCD_ENABLE;
 8000252:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <LCD_WRITE_STRING+0xa4>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <LCD_WRITE_STRING+0xa4>)
 8000258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025c:	60d3      	str	r3, [r2, #12]
 800025e:	2032      	movs	r0, #50	; 0x32
 8000260:	f000 fc2a 	bl	8000ab8 <wait_ms>
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <LCD_WRITE_STRING+0xa4>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a15      	ldr	r2, [pc, #84]	; (80002c0 <LCD_WRITE_STRING+0xa4>)
 800026a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800026e:	60d3      	str	r3, [r2, #12]
 8000270:	20c8      	movs	r0, #200	; 0xc8
 8000272:	f000 fc21 	bl	8000ab8 <wait_ms>
		if (COUNT_STRING == 15){
 8000276:	7bbb      	ldrb	r3, [r7, #14]
 8000278:	2b0f      	cmp	r3, #15
 800027a:	d104      	bne.n	8000286 <LCD_WRITE_STRING+0x6a>
		GOTO_XY(0,1);
 800027c:	2101      	movs	r1, #1
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ff76 	bl	8000170 <GOTO_XY>
 8000284:	e00b      	b.n	800029e <LCD_WRITE_STRING+0x82>
	}
	else if (COUNT_STRING == 30){
 8000286:	7bbb      	ldrb	r3, [r7, #14]
 8000288:	2b1e      	cmp	r3, #30
 800028a:	d108      	bne.n	800029e <LCD_WRITE_STRING+0x82>
		COUNT_STRING = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	73bb      	strb	r3, [r7, #14]
		LCD_WRITE_COMMAND(LCD_Clear_Display);
 8000290:	2001      	movs	r0, #1
 8000292:	f7ff ff95 	bl	80001c0 <LCD_WRITE_COMMAND>
		GOTO_XY(0,0);
 8000296:	2100      	movs	r1, #0
 8000298:	2000      	movs	r0, #0
 800029a:	f7ff ff69 	bl	8000170 <GOTO_XY>
	}
		i++;
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	3301      	adds	r3, #1
 80002a2:	73fb      	strb	r3, [r7, #15]
		COUNT_STRING++;
 80002a4:	7bbb      	ldrb	r3, [r7, #14]
 80002a6:	3301      	adds	r3, #1
 80002a8:	73bb      	strb	r3, [r7, #14]
	while(string[i]){
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4413      	add	r3, r2
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d1bb      	bne.n	800022e <LCD_WRITE_STRING+0x12>
	}
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40010800 	.word	0x40010800

080002c4 <MCAL_EXTI_INIT>:
* @brief - Initialize the portx
* @param[in] - GPIO port
* @param[out] - GPIO pin in the specific port (in the last parameter)
*               takes values @ref GPIO_PinNumber  @ref GPIO_MODE  @ref GPIO_FREQ
*/
void MCAL_EXTI_INIT(EXTI_CONFIG_t * EXTI_CONFIG){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_CONFIG);
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f000 f8d1 	bl	8000474 <Update_EXTI>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <ENABLE_NVIC>:

//		|-----------------------------------------------|
//		|=============GENERIC FUNCTIONS=================|
//		|-----------------------------------------------|

void ENABLE_NVIC(uint16_t IRQ){
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	switch (IRQ){
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	d854      	bhi.n	8000396 <ENABLE_NVIC+0xba>
 80002ec:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <ENABLE_NVIC+0x18>)
 80002ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f2:	bf00      	nop
 80002f4:	08000335 	.word	0x08000335
 80002f8:	08000343 	.word	0x08000343
 80002fc:	08000351 	.word	0x08000351
 8000300:	0800035f 	.word	0x0800035f
 8000304:	0800036d 	.word	0x0800036d
 8000308:	0800037b 	.word	0x0800037b
 800030c:	0800037b 	.word	0x0800037b
 8000310:	0800037b 	.word	0x0800037b
 8000314:	0800037b 	.word	0x0800037b
 8000318:	0800037b 	.word	0x0800037b
 800031c:	08000389 	.word	0x08000389
 8000320:	08000389 	.word	0x08000389
 8000324:	08000389 	.word	0x08000389
 8000328:	08000389 	.word	0x08000389
 800032c:	08000389 	.word	0x08000389
 8000330:	08000389 	.word	0x08000389
	case 0:
		NVIC_IRQ6_EXTI0_ENABLE;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <ENABLE_NVIC+0xc4>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <ENABLE_NVIC+0xc4>)
 800033a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800033e:	6013      	str	r3, [r2, #0]
		break;
 8000340:	e029      	b.n	8000396 <ENABLE_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_ENABLE;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <ENABLE_NVIC+0xc4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a16      	ldr	r2, [pc, #88]	; (80003a0 <ENABLE_NVIC+0xc4>)
 8000348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034c:	6013      	str	r3, [r2, #0]
		break;
 800034e:	e022      	b.n	8000396 <ENABLE_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_ENABLE;
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <ENABLE_NVIC+0xc4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <ENABLE_NVIC+0xc4>)
 8000356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800035a:	6013      	str	r3, [r2, #0]
		break;
 800035c:	e01b      	b.n	8000396 <ENABLE_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_ENABLE;
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <ENABLE_NVIC+0xc4>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <ENABLE_NVIC+0xc4>)
 8000364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000368:	6013      	str	r3, [r2, #0]
		break;
 800036a:	e014      	b.n	8000396 <ENABLE_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_ENABLE;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <ENABLE_NVIC+0xc4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <ENABLE_NVIC+0xc4>)
 8000372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000376:	6013      	str	r3, [r2, #0]
		break;
 8000378:	e00d      	b.n	8000396 <ENABLE_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_ENABLE;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <ENABLE_NVIC+0xc4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <ENABLE_NVIC+0xc4>)
 8000380:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000384:	6013      	str	r3, [r2, #0]
		break;
 8000386:	e006      	b.n	8000396 <ENABLE_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_ENABLE;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <ENABLE_NVIC+0xc8>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <ENABLE_NVIC+0xc8>)
 800038e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000392:	6013      	str	r3, [r2, #0]
		break;
 8000394:	bf00      	nop


	}
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	e000e100 	.word	0xe000e100
 80003a4:	e000e104 	.word	0xe000e104

080003a8 <DISABLE_NVIC>:


void DISABLE_NVIC(uint16_t IRQ){
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	80fb      	strh	r3, [r7, #6]
	switch (IRQ){
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	2b0f      	cmp	r3, #15
 80003b6:	d854      	bhi.n	8000462 <DISABLE_NVIC+0xba>
 80003b8:	a201      	add	r2, pc, #4	; (adr r2, 80003c0 <DISABLE_NVIC+0x18>)
 80003ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003be:	bf00      	nop
 80003c0:	08000401 	.word	0x08000401
 80003c4:	0800040f 	.word	0x0800040f
 80003c8:	0800041d 	.word	0x0800041d
 80003cc:	0800042b 	.word	0x0800042b
 80003d0:	08000439 	.word	0x08000439
 80003d4:	08000447 	.word	0x08000447
 80003d8:	08000447 	.word	0x08000447
 80003dc:	08000447 	.word	0x08000447
 80003e0:	08000447 	.word	0x08000447
 80003e4:	08000447 	.word	0x08000447
 80003e8:	08000455 	.word	0x08000455
 80003ec:	08000455 	.word	0x08000455
 80003f0:	08000455 	.word	0x08000455
 80003f4:	08000455 	.word	0x08000455
 80003f8:	08000455 	.word	0x08000455
 80003fc:	08000455 	.word	0x08000455
	case 0:
		NVIC_IRQ6_EXTI0_DISABLE;
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <DISABLE_NVIC+0xc4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a19      	ldr	r2, [pc, #100]	; (800046c <DISABLE_NVIC+0xc4>)
 8000406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040a:	6013      	str	r3, [r2, #0]
		break;
 800040c:	e029      	b.n	8000462 <DISABLE_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_DISABLE;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <DISABLE_NVIC+0xc4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a16      	ldr	r2, [pc, #88]	; (800046c <DISABLE_NVIC+0xc4>)
 8000414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000418:	6013      	str	r3, [r2, #0]
		break;
 800041a:	e022      	b.n	8000462 <DISABLE_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_DISABLE;
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <DISABLE_NVIC+0xc4>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <DISABLE_NVIC+0xc4>)
 8000422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000426:	6013      	str	r3, [r2, #0]
		break;
 8000428:	e01b      	b.n	8000462 <DISABLE_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_DISABLE;
 800042a:	4b10      	ldr	r3, [pc, #64]	; (800046c <DISABLE_NVIC+0xc4>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a0f      	ldr	r2, [pc, #60]	; (800046c <DISABLE_NVIC+0xc4>)
 8000430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000434:	6013      	str	r3, [r2, #0]
		break;
 8000436:	e014      	b.n	8000462 <DISABLE_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_DISABLE;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <DISABLE_NVIC+0xc4>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a0b      	ldr	r2, [pc, #44]	; (800046c <DISABLE_NVIC+0xc4>)
 800043e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000442:	6013      	str	r3, [r2, #0]
		break;
 8000444:	e00d      	b.n	8000462 <DISABLE_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_DISABLE;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <DISABLE_NVIC+0xc4>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a08      	ldr	r2, [pc, #32]	; (800046c <DISABLE_NVIC+0xc4>)
 800044c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000450:	6013      	str	r3, [r2, #0]
		break;
 8000452:	e006      	b.n	8000462 <DISABLE_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_DISABLE;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <DISABLE_NVIC+0xc8>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a05      	ldr	r2, [pc, #20]	; (8000470 <DISABLE_NVIC+0xc8>)
 800045a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800045e:	6013      	str	r3, [r2, #0]
		break;
 8000460:	bf00      	nop


	}
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	e000e180 	.word	0xe000e180
 8000470:	e000e184 	.word	0xe000e184

08000474 <Update_EXTI>:



void Update_EXTI(EXTI_CONFIG_t * EXTI_CONFIG){
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]

	//1- Configure the GPIO to be AF input (floating input)
	GPIO_PinConfig_t PINCFG;
	PINCFG.GPIO_PinNumber = EXTI_CONFIG->EXTI_PIN.GPIO_PIN;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	891b      	ldrh	r3, [r3, #8]
 8000480:	813b      	strh	r3, [r7, #8]
	PINCFG.GPIO_MODE = GPIO_MODE_ALTERNATIVE_INPUT;
 8000482:	2301      	movs	r3, #1
 8000484:	72bb      	strb	r3, [r7, #10]
	PINCFG.GPIO_OUTPUT_SPEED = GPIO_FREQ_IN;
 8000486:	2300      	movs	r3, #0
 8000488:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIO_INIT_PIN(EXTI_CONFIG->EXTI_PIN.GPIO_PORT , &PINCFG);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	f107 0208 	add.w	r2, r7, #8
 8000492:	4611      	mov	r1, r2
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f9db 	bl	8000850 <MCAL_GPIO_INIT_PIN>
//  _____________________________________________________________________

	//2- Configure the AFIO to route between the EXTI lines with ports A , B , C , D
	uint8_t AFIO_EXTICR_INDEX = EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_LINENUMBER / 4 ;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b29b      	uxth	r3, r3
 80004a2:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_POSITION = (EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_LINENUMBER % 4) * 4;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	881b      	ldrh	r3, [r3, #0]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	f003 0303 	and.w	r3, r3, #3
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	73bb      	strb	r3, [r7, #14]
	AFIO->EXTICR[AFIO_EXTICR_INDEX] = (AFIO->EXTICR[AFIO_EXTICR_INDEX] & ~(0xF << AFIO_EXTICR_POSITION)) | (AFIO_GPIO_EXTI_MAPPING(EXTI_CONFIG->EXTI_PIN.GPIO_PORT) << AFIO_EXTICR_POSITION);
 80004b4:	4a58      	ldr	r2, [pc, #352]	; (8000618 <Update_EXTI+0x1a4>)
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	3302      	adds	r3, #2
 80004ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004be:	7bba      	ldrb	r2, [r7, #14]
 80004c0:	210f      	movs	r1, #15
 80004c2:	fa01 f202 	lsl.w	r2, r1, r2
 80004c6:	43d2      	mvns	r2, r2
 80004c8:	401a      	ands	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	4953      	ldr	r1, [pc, #332]	; (800061c <Update_EXTI+0x1a8>)
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d00f      	beq.n	80004f4 <Update_EXTI+0x80>
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	4951      	ldr	r1, [pc, #324]	; (8000620 <Update_EXTI+0x1ac>)
 80004da:	428b      	cmp	r3, r1
 80004dc:	d008      	beq.n	80004f0 <Update_EXTI+0x7c>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	4950      	ldr	r1, [pc, #320]	; (8000624 <Update_EXTI+0x1b0>)
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d101      	bne.n	80004ec <Update_EXTI+0x78>
 80004e8:	2302      	movs	r3, #2
 80004ea:	e004      	b.n	80004f6 <Update_EXTI+0x82>
 80004ec:	2303      	movs	r3, #3
 80004ee:	e002      	b.n	80004f6 <Update_EXTI+0x82>
 80004f0:	2301      	movs	r3, #1
 80004f2:	e000      	b.n	80004f6 <Update_EXTI+0x82>
 80004f4:	2300      	movs	r3, #0
 80004f6:	7bb9      	ldrb	r1, [r7, #14]
 80004f8:	408b      	lsls	r3, r1
 80004fa:	4618      	mov	r0, r3
 80004fc:	4946      	ldr	r1, [pc, #280]	; (8000618 <Update_EXTI+0x1a4>)
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	4302      	orrs	r2, r0
 8000502:	3302      	adds	r3, #2
 8000504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//	________________________________________________________________________________________________________________________________________________________________________________________________________


// 3- Configure the rising & falling edges

	if(EXTI_CONFIG->TRIGGER_CASE == EXTI_CASE_RISING){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	7b1b      	ldrb	r3, [r3, #12]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d112      	bne.n	8000536 <Update_EXTI+0xc2>
		EXTI->RTSR = (EXTI->RTSR & ~(1 << EXTI_CONFIG->EXTI_PIN.GPIO_PIN)) | (1 << EXTI_CONFIG->EXTI_PIN.GPIO_PIN);
 8000510:	4b45      	ldr	r3, [pc, #276]	; (8000628 <Update_EXTI+0x1b4>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	8912      	ldrh	r2, [r2, #8]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	43d2      	mvns	r2, r2
 8000520:	4013      	ands	r3, r2
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	8912      	ldrh	r2, [r2, #8]
 8000526:	4611      	mov	r1, r2
 8000528:	2201      	movs	r2, #1
 800052a:	408a      	lsls	r2, r1
 800052c:	4611      	mov	r1, r2
 800052e:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <Update_EXTI+0x1b4>)
 8000530:	430b      	orrs	r3, r1
 8000532:	6093      	str	r3, [r2, #8]
 8000534:	e03e      	b.n	80005b4 <Update_EXTI+0x140>
	}
	else if(EXTI_CONFIG->TRIGGER_CASE == EXTI_CASE_FALLING){
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7b1b      	ldrb	r3, [r3, #12]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d112      	bne.n	8000564 <Update_EXTI+0xf0>
		EXTI->FTSR = (EXTI->FTSR & ~(1 << EXTI_CONFIG->EXTI_PIN.GPIO_PIN)) | (1 << EXTI_CONFIG->EXTI_PIN.GPIO_PIN);
 800053e:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <Update_EXTI+0x1b4>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	8912      	ldrh	r2, [r2, #8]
 8000546:	4611      	mov	r1, r2
 8000548:	2201      	movs	r2, #1
 800054a:	408a      	lsls	r2, r1
 800054c:	43d2      	mvns	r2, r2
 800054e:	4013      	ands	r3, r2
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	8912      	ldrh	r2, [r2, #8]
 8000554:	4611      	mov	r1, r2
 8000556:	2201      	movs	r2, #1
 8000558:	408a      	lsls	r2, r1
 800055a:	4611      	mov	r1, r2
 800055c:	4a32      	ldr	r2, [pc, #200]	; (8000628 <Update_EXTI+0x1b4>)
 800055e:	430b      	orrs	r3, r1
 8000560:	60d3      	str	r3, [r2, #12]
 8000562:	e027      	b.n	80005b4 <Update_EXTI+0x140>
	}
	else if(EXTI_CONFIG->TRIGGER_CASE == EXTI_CASE_RISING_FALLING){
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	7b1b      	ldrb	r3, [r3, #12]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d123      	bne.n	80005b4 <Update_EXTI+0x140>
		EXTI->RTSR = (EXTI->RTSR & ~(1 << EXTI_CONFIG->EXTI_PIN.GPIO_PIN)) | (1 << EXTI_CONFIG->EXTI_PIN.GPIO_PIN);
 800056c:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <Update_EXTI+0x1b4>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	8912      	ldrh	r2, [r2, #8]
 8000574:	4611      	mov	r1, r2
 8000576:	2201      	movs	r2, #1
 8000578:	408a      	lsls	r2, r1
 800057a:	43d2      	mvns	r2, r2
 800057c:	4013      	ands	r3, r2
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	8912      	ldrh	r2, [r2, #8]
 8000582:	4611      	mov	r1, r2
 8000584:	2201      	movs	r2, #1
 8000586:	408a      	lsls	r2, r1
 8000588:	4611      	mov	r1, r2
 800058a:	4a27      	ldr	r2, [pc, #156]	; (8000628 <Update_EXTI+0x1b4>)
 800058c:	430b      	orrs	r3, r1
 800058e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR = (EXTI->FTSR & ~(1 << EXTI_CONFIG->EXTI_PIN.GPIO_PIN)) | (1 << EXTI_CONFIG->EXTI_PIN.GPIO_PIN);
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <Update_EXTI+0x1b4>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	8912      	ldrh	r2, [r2, #8]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	43d2      	mvns	r2, r2
 80005a0:	4013      	ands	r3, r2
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	8912      	ldrh	r2, [r2, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	2201      	movs	r2, #1
 80005aa:	408a      	lsls	r2, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a1e      	ldr	r2, [pc, #120]	; (8000628 <Update_EXTI+0x1b4>)
 80005b0:	430b      	orrs	r3, r1
 80005b2:	60d3      	str	r3, [r2, #12]
	}
//	_________________________________________________________________________________________________________________

	//4- Configure IRQ Call back function

	GP_IRQ_CALL_BACK[EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_LINENUMBER] = EXTI_CONFIG->P_IRQ_CALL_BACK;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	691b      	ldr	r3, [r3, #16]
 80005be:	4a1b      	ldr	r2, [pc, #108]	; (800062c <Update_EXTI+0x1b8>)
 80005c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//5- Enable/Disable IRQ EXTI & NVIC

	if(EXTI_CONFIG->IRQ_EN == IRQ_ENABLE){
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7b5b      	ldrb	r3, [r3, #13]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d110      	bne.n	80005ee <Update_EXTI+0x17a>
		EXTI->IMR |= (1 << EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_LINENUMBER);
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <Update_EXTI+0x1b4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	8812      	ldrh	r2, [r2, #0]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <Update_EXTI+0x1b4>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	6013      	str	r3, [r2, #0]
		ENABLE_NVIC(EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_LINENUMBER);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fe78 	bl	80002dc <ENABLE_NVIC>
	else{
		EXTI->IMR &= ~(1 << EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_LINENUMBER);
		DISABLE_NVIC(EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_LINENUMBER);
	}

}
 80005ec:	e010      	b.n	8000610 <Update_EXTI+0x19c>
		EXTI->IMR &= ~(1 << EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_LINENUMBER);
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <Update_EXTI+0x1b4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	8812      	ldrh	r2, [r2, #0]
 80005f6:	4611      	mov	r1, r2
 80005f8:	2201      	movs	r2, #1
 80005fa:	408a      	lsls	r2, r1
 80005fc:	43d2      	mvns	r2, r2
 80005fe:	4611      	mov	r1, r2
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <Update_EXTI+0x1b4>)
 8000602:	400b      	ands	r3, r1
 8000604:	6013      	str	r3, [r2, #0]
		DISABLE_NVIC(EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_LINENUMBER);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fecc 	bl	80003a8 <DISABLE_NVIC>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40010000 	.word	0x40010000
 800061c:	40010800 	.word	0x40010800
 8000620:	40010c00 	.word	0x40010c00
 8000624:	40011000 	.word	0x40011000
 8000628:	40010400 	.word	0x40010400
 800062c:	20000020 	.word	0x20000020

08000630 <EXTI0_IRQHandler>:
//		|-----------------------------------------------|
//		|=================ISR FUNCTIONS=================|
//		|-----------------------------------------------|


	void EXTI0_IRQHandler(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

		EXTI->PR |= 1 << 0;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <EXTI0_IRQHandler+0x1c>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <EXTI0_IRQHandler+0x1c>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALL_BACK[0]();
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <EXTI0_IRQHandler+0x20>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4798      	blx	r3
	}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40010400 	.word	0x40010400
 8000650:	20000020 	.word	0x20000020

08000654 <EXTI1_IRQHandler>:


	void EXTI1_IRQHandler(void){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
		EXTI->PR |= 1 << 1;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <EXTI1_IRQHandler+0x1c>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <EXTI1_IRQHandler+0x1c>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALL_BACK[1]();
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <EXTI1_IRQHandler+0x20>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	4798      	blx	r3

	}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40010400 	.word	0x40010400
 8000674:	20000020 	.word	0x20000020

08000678 <EXTI2_IRQHandler>:

	void EXTI2_IRQHandler(void){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
		EXTI->PR |= 1 << 2;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <EXTI2_IRQHandler+0x1c>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <EXTI2_IRQHandler+0x1c>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALL_BACK[2]();
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <EXTI2_IRQHandler+0x20>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	4798      	blx	r3
	}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40010400 	.word	0x40010400
 8000698:	20000020 	.word	0x20000020

0800069c <EXTI3_IRQHandler>:

	void EXTI3_IRQHandler(void){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
		EXTI->PR |= 1 << 3;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <EXTI3_IRQHandler+0x1c>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <EXTI3_IRQHandler+0x1c>)
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALL_BACK[3]();
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <EXTI3_IRQHandler+0x20>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	4798      	blx	r3
	}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40010400 	.word	0x40010400
 80006bc:	20000020 	.word	0x20000020

080006c0 <EXTI4_IRQHandler>:


	void EXTI4_IRQHandler(void){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
		EXTI->PR |= 1 << 4;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <EXTI4_IRQHandler+0x1c>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <EXTI4_IRQHandler+0x1c>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALL_BACK[4]();
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <EXTI4_IRQHandler+0x20>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4798      	blx	r3
	}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40010400 	.word	0x40010400
 80006e0:	20000020 	.word	0x20000020

080006e4 <EXTI9_5_IRQHandler>:


	void EXTI9_5_IRQHandler(void){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
		if(EXTI->PR & (1 << 5 )) {EXTI->PR |= (1 << 5);  GP_IRQ_CALL_BACK[5]();}
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	f003 0320 	and.w	r3, r3, #32
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d008      	beq.n	8000706 <EXTI9_5_IRQHandler+0x22>
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	6153      	str	r3, [r2, #20]
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <EXTI9_5_IRQHandler+0xa4>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4798      	blx	r3
		if(EXTI->PR & (1 << 6 )) {EXTI->PR |= (1 << 6);  GP_IRQ_CALL_BACK[6]();}
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070e:	2b00      	cmp	r3, #0
 8000710:	d008      	beq.n	8000724 <EXTI9_5_IRQHandler+0x40>
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <EXTI9_5_IRQHandler+0xa4>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4798      	blx	r3
		if(EXTI->PR & (1 << 7 )) {EXTI->PR |= (1 << 7);  GP_IRQ_CALL_BACK[7]();}
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072c:	2b00      	cmp	r3, #0
 800072e:	d008      	beq.n	8000742 <EXTI9_5_IRQHandler+0x5e>
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	4a13      	ldr	r2, [pc, #76]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073a:	6153      	str	r3, [r2, #20]
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <EXTI9_5_IRQHandler+0xa4>)
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	4798      	blx	r3
		if(EXTI->PR & (1 << 8 )) {EXTI->PR |= (1 << 8);  GP_IRQ_CALL_BACK[8]();}
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800074a:	2b00      	cmp	r3, #0
 800074c:	d008      	beq.n	8000760 <EXTI9_5_IRQHandler+0x7c>
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <EXTI9_5_IRQHandler+0xa4>)
 800075c:	6a1b      	ldr	r3, [r3, #32]
 800075e:	4798      	blx	r3
		if(EXTI->PR & (1 << 9 )) {EXTI->PR |= (1 << 9);  GP_IRQ_CALL_BACK[9]();}
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000768:	2b00      	cmp	r3, #0
 800076a:	d008      	beq.n	800077e <EXTI9_5_IRQHandler+0x9a>
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 800076e:	695b      	ldr	r3, [r3, #20]
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <EXTI9_5_IRQHandler+0xa0>)
 8000772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000776:	6153      	str	r3, [r2, #20]
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <EXTI9_5_IRQHandler+0xa4>)
 800077a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077c:	4798      	blx	r3
	}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40010400 	.word	0x40010400
 8000788:	20000020 	.word	0x20000020

0800078c <EXTI15_10_IRQHandler>:


	void EXTI15_10_IRQHandler(void){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
		if(EXTI->PR & (1 << 10 )) {EXTI->PR |= (1 << 10);  GP_IRQ_CALL_BACK[10]();}
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000798:	2b00      	cmp	r3, #0
 800079a:	d008      	beq.n	80007ae <EXTI15_10_IRQHandler+0x22>
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	4a29      	ldr	r2, [pc, #164]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 80007a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a6:	6153      	str	r3, [r2, #20]
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <EXTI15_10_IRQHandler+0xc0>)
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ac:	4798      	blx	r3
		if(EXTI->PR & (1 << 11 )) {EXTI->PR |= (1 << 11);  GP_IRQ_CALL_BACK[11]();}
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d008      	beq.n	80007cc <EXTI15_10_IRQHandler+0x40>
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a22      	ldr	r2, [pc, #136]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 80007c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <EXTI15_10_IRQHandler+0xc0>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	4798      	blx	r3
		if(EXTI->PR & (1 << 12 )) {EXTI->PR |= (1 << 12);  GP_IRQ_CALL_BACK[12]();}
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d008      	beq.n	80007ea <EXTI15_10_IRQHandler+0x5e>
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 80007de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e2:	6153      	str	r3, [r2, #20]
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <EXTI15_10_IRQHandler+0xc0>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4798      	blx	r3
		if(EXTI->PR & (1 << 13 )) {EXTI->PR |= (1 << 13);  GP_IRQ_CALL_BACK[13]();}
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d008      	beq.n	8000808 <EXTI15_10_IRQHandler+0x7c>
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a13      	ldr	r2, [pc, #76]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 80007fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <EXTI15_10_IRQHandler+0xc0>)
 8000804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000806:	4798      	blx	r3
		if(EXTI->PR & (1 << 14 )) {EXTI->PR |= (1 << 14);  GP_IRQ_CALL_BACK[14]();}
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <EXTI15_10_IRQHandler+0x9a>
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 800081a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081e:	6153      	str	r3, [r2, #20]
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <EXTI15_10_IRQHandler+0xc0>)
 8000822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000824:	4798      	blx	r3
		if(EXTI->PR & (1 << 15 )) {EXTI->PR |= (1 << 15);  GP_IRQ_CALL_BACK[15]();}
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d008      	beq.n	8000844 <EXTI15_10_IRQHandler+0xb8>
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <EXTI15_10_IRQHandler+0xbc>)
 8000838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b03      	ldr	r3, [pc, #12]	; (800084c <EXTI15_10_IRQHandler+0xc0>)
 8000840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000842:	4798      	blx	r3
	}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40010400 	.word	0x40010400
 800084c:	20000020 	.word	0x20000020

08000850 <MCAL_GPIO_INIT_PIN>:
* @param[in] - GPIO port
* @param[out] - GPIO pin in the specific port (in the last parameter)
*               takes values @ref GPIO_PinNumber  @ref GPIO_MODE  @ref GPIO_FREQ
*/

void MCAL_GPIO_INIT_PIN(GPIO_T * GPIOx , GPIO_PinConfig_t * PIN_CONFIG){
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	volatile uint8_t PIN_SELECT ;
	PIN_SELECT = (PIN_CONFIG->GPIO_PinNumber > 7 )? 1 : 0;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	2b07      	cmp	r3, #7
 8000860:	bf8c      	ite	hi
 8000862:	2301      	movhi	r3, #1
 8000864:	2300      	movls	r3, #0
 8000866:	b2db      	uxtb	r3, r3
 8000868:	72fb      	strb	r3, [r7, #11]
	PIN_SELECT = ((PIN_CONFIG->GPIO_PinNumber - 8 * PIN_SELECT) * GPIO_REGISTER_SIZE);    //GPIO_REGISTER_SIZE exists in GENERIC MACROS in GPIO header
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	72fb      	strb	r3, [r7, #11]
	volatile uint32_t * REGISTER_SELECT ;
	REGISTER_SELECT = (PIN_CONFIG->GPIO_PinNumber > 7 )? &GPIOx->CRH : &GPIOx->CRL;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	2b07      	cmp	r3, #7
 8000886:	d902      	bls.n	800088e <MCAL_GPIO_INIT_PIN+0x3e>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3304      	adds	r3, #4
 800088c:	e000      	b.n	8000890 <MCAL_GPIO_INIT_PIN+0x40>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	60fb      	str	r3, [r7, #12]
	*REGISTER_SELECT &= ~(0xf << PIN_SELECT);
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	b2db      	uxtb	r3, r3
 8000896:	461a      	mov	r2, r3
 8000898:	230f      	movs	r3, #15
 800089a:	4093      	lsls	r3, r2
 800089c:	43da      	mvns	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	401a      	ands	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	601a      	str	r2, [r3, #0]
	*REGISTER_SELECT |= (PIN_CONFIG->GPIO_MODE<<2 | PIN_CONFIG->GPIO_OUTPUT_SPEED) << PIN_SELECT;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	789b      	ldrb	r3, [r3, #2]
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	78d2      	ldrb	r2, [r2, #3]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	7afa      	ldrb	r2, [r7, #11]
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	fa03 f202 	lsl.w	r2, r3, r2
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	431a      	orrs	r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	601a      	str	r2, [r3, #0]
	if(PIN_CONFIG->GPIO_MODE == GPIO_MODE_INPUT_PULLUP){
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	789b      	ldrb	r3, [r3, #2]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d10a      	bne.n	80008e4 <MCAL_GPIO_INIT_PIN+0x94>
		GPIOx->ODR |= (1 << PIN_CONFIG->GPIO_PinNumber);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	8812      	ldrh	r2, [r2, #0]
 80008d6:	4611      	mov	r1, r2
 80008d8:	2201      	movs	r2, #1
 80008da:	408a      	lsls	r2, r1
 80008dc:	431a      	orrs	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	60da      	str	r2, [r3, #12]
	}
	else if(PIN_CONFIG->GPIO_MODE == GPIO_MODE_INPUT_PULLDOWN){
		GPIOx->ODR &= ~(1 << PIN_CONFIG->GPIO_PinNumber);
	}

}
 80008e2:	e00e      	b.n	8000902 <MCAL_GPIO_INIT_PIN+0xb2>
	else if(PIN_CONFIG->GPIO_MODE == GPIO_MODE_INPUT_PULLDOWN){
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	789b      	ldrb	r3, [r3, #2]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d10a      	bne.n	8000902 <MCAL_GPIO_INIT_PIN+0xb2>
		GPIOx->ODR &= ~(1 << PIN_CONFIG->GPIO_PinNumber);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	8812      	ldrh	r2, [r2, #0]
 80008f4:	4611      	mov	r1, r2
 80008f6:	2201      	movs	r2, #1
 80008f8:	408a      	lsls	r2, r1
 80008fa:	43d2      	mvns	r2, r2
 80008fc:	401a      	ands	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60da      	str	r2, [r3, #12]
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <init>:


//GPIO_PinConfig_t PINA_13 ;


void init(){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	//ُEnable Clock
	RCC_GPIOA_CLK_EN() ;	//enable GPIOA CLOCK FOR LCD
 8000910:	4b5c      	ldr	r3, [pc, #368]	; (8000a84 <init+0x178>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a5b      	ldr	r2, [pc, #364]	; (8000a84 <init+0x178>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() ;	//enable GPIOB CLOCK FOR INTERRUPT INPUT
 800091c:	4b59      	ldr	r3, [pc, #356]	; (8000a84 <init+0x178>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a58      	ldr	r2, [pc, #352]	; (8000a84 <init+0x178>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();		//enable AFIO CLOCK FOR INTERRUPT
 8000928:	4b56      	ldr	r3, [pc, #344]	; (8000a84 <init+0x178>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a55      	ldr	r2, [pc, #340]	; (8000a84 <init+0x178>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6193      	str	r3, [r2, #24]
	//=========================
	//LCD PINS
	//=========================

	// D0
	PINA_0.GPIO_PinNumber = GPIO_PIN_0;
 8000934:	4b54      	ldr	r3, [pc, #336]	; (8000a88 <init+0x17c>)
 8000936:	2200      	movs	r2, #0
 8000938:	801a      	strh	r2, [r3, #0]
	PINA_0.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 800093a:	4b53      	ldr	r3, [pc, #332]	; (8000a88 <init+0x17c>)
 800093c:	2200      	movs	r2, #0
 800093e:	709a      	strb	r2, [r3, #2]
	PINA_0.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 8000940:	4b51      	ldr	r3, [pc, #324]	; (8000a88 <init+0x17c>)
 8000942:	2201      	movs	r2, #1
 8000944:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_0);
 8000946:	4b51      	ldr	r3, [pc, #324]	; (8000a8c <init+0x180>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	494f      	ldr	r1, [pc, #316]	; (8000a88 <init+0x17c>)
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff7f 	bl	8000850 <MCAL_GPIO_INIT_PIN>

	//D1
	PINA_1.GPIO_PinNumber = GPIO_PIN_1;
 8000952:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <init+0x184>)
 8000954:	2201      	movs	r2, #1
 8000956:	801a      	strh	r2, [r3, #0]
	PINA_1.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000958:	4b4d      	ldr	r3, [pc, #308]	; (8000a90 <init+0x184>)
 800095a:	2200      	movs	r2, #0
 800095c:	709a      	strb	r2, [r3, #2]
	PINA_1.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 800095e:	4b4c      	ldr	r3, [pc, #304]	; (8000a90 <init+0x184>)
 8000960:	2201      	movs	r2, #1
 8000962:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_1);
 8000964:	4b49      	ldr	r3, [pc, #292]	; (8000a8c <init+0x180>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4949      	ldr	r1, [pc, #292]	; (8000a90 <init+0x184>)
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ff70 	bl	8000850 <MCAL_GPIO_INIT_PIN>

	//D2
	PINA_2.GPIO_PinNumber = GPIO_PIN_2;
 8000970:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <init+0x188>)
 8000972:	2202      	movs	r2, #2
 8000974:	801a      	strh	r2, [r3, #0]
	PINA_2.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000976:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <init+0x188>)
 8000978:	2200      	movs	r2, #0
 800097a:	709a      	strb	r2, [r3, #2]
	PINA_2.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 800097c:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <init+0x188>)
 800097e:	2201      	movs	r2, #1
 8000980:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_2);
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <init+0x180>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4943      	ldr	r1, [pc, #268]	; (8000a94 <init+0x188>)
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff61 	bl	8000850 <MCAL_GPIO_INIT_PIN>

	//D3
	PINA_3.GPIO_PinNumber = GPIO_PIN_3;
 800098e:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <init+0x18c>)
 8000990:	2203      	movs	r2, #3
 8000992:	801a      	strh	r2, [r3, #0]
	PINA_3.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000994:	4b40      	ldr	r3, [pc, #256]	; (8000a98 <init+0x18c>)
 8000996:	2200      	movs	r2, #0
 8000998:	709a      	strb	r2, [r3, #2]
	PINA_3.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 800099a:	4b3f      	ldr	r3, [pc, #252]	; (8000a98 <init+0x18c>)
 800099c:	2201      	movs	r2, #1
 800099e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_3);
 80009a0:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <init+0x180>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	493c      	ldr	r1, [pc, #240]	; (8000a98 <init+0x18c>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff52 	bl	8000850 <MCAL_GPIO_INIT_PIN>

	//D4
	PINA_4.GPIO_PinNumber = GPIO_PIN_4;
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <init+0x190>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	801a      	strh	r2, [r3, #0]
	PINA_4.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <init+0x190>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	709a      	strb	r2, [r3, #2]
	PINA_4.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <init+0x190>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_4);
 80009be:	4b33      	ldr	r3, [pc, #204]	; (8000a8c <init+0x180>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4936      	ldr	r1, [pc, #216]	; (8000a9c <init+0x190>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff43 	bl	8000850 <MCAL_GPIO_INIT_PIN>

	//D5
	PINA_5.GPIO_PinNumber = GPIO_PIN_5;
 80009ca:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <init+0x194>)
 80009cc:	2205      	movs	r2, #5
 80009ce:	801a      	strh	r2, [r3, #0]
	PINA_5.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <init+0x194>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	709a      	strb	r2, [r3, #2]
	PINA_5.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <init+0x194>)
 80009d8:	2201      	movs	r2, #1
 80009da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_5);
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <init+0x180>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	492f      	ldr	r1, [pc, #188]	; (8000aa0 <init+0x194>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff34 	bl	8000850 <MCAL_GPIO_INIT_PIN>

	//D6
	PINA_6.GPIO_PinNumber = GPIO_PIN_6;
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <init+0x198>)
 80009ea:	2206      	movs	r2, #6
 80009ec:	801a      	strh	r2, [r3, #0]
	PINA_6.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <init+0x198>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	709a      	strb	r2, [r3, #2]
	PINA_6.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <init+0x198>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_6);
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <init+0x180>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4929      	ldr	r1, [pc, #164]	; (8000aa4 <init+0x198>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff25 	bl	8000850 <MCAL_GPIO_INIT_PIN>

	//D7
	PINA_7.GPIO_PinNumber = GPIO_PIN_7;
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <init+0x19c>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	801a      	strh	r2, [r3, #0]
	PINA_7.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <init+0x19c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	709a      	strb	r2, [r3, #2]
	PINA_7.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <init+0x19c>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_7);
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <init+0x180>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4922      	ldr	r1, [pc, #136]	; (8000aa8 <init+0x19c>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff16 	bl	8000850 <MCAL_GPIO_INIT_PIN>

	//RS
	PINA_8.GPIO_PinNumber = GPIO_PIN_8;
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <init+0x1a0>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	801a      	strh	r2, [r3, #0]
	PINA_8.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <init+0x1a0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	709a      	strb	r2, [r3, #2]
	PINA_8.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <init+0x1a0>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_8);
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <init+0x180>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	491c      	ldr	r1, [pc, #112]	; (8000aac <init+0x1a0>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff07 	bl	8000850 <MCAL_GPIO_INIT_PIN>

	//WR
	PINA_9.GPIO_PinNumber = GPIO_PIN_9;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <init+0x1a4>)
 8000a44:	2209      	movs	r2, #9
 8000a46:	801a      	strh	r2, [r3, #0]
	PINA_9.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <init+0x1a4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	709a      	strb	r2, [r3, #2]
	PINA_9.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <init+0x1a4>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_9);
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <init+0x180>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4915      	ldr	r1, [pc, #84]	; (8000ab0 <init+0x1a4>)
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fef8 	bl	8000850 <MCAL_GPIO_INIT_PIN>

	//EN
	PINA_10.GPIO_PinNumber = GPIO_PIN_10;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <init+0x1a8>)
 8000a62:	220a      	movs	r2, #10
 8000a64:	801a      	strh	r2, [r3, #0]
	PINA_10.GPIO_MODE = GPIO_MODE_OUTPUT_GENERAL_PUSHPULL;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <init+0x1a8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	709a      	strb	r2, [r3, #2]
	PINA_10.GPIO_OUTPUT_SPEED = GPIO_FREQ_10MHZ;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <init+0x1a8>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT_PIN(GPIO_A , &PINA_10);
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <init+0x180>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	490f      	ldr	r1, [pc, #60]	; (8000ab4 <init+0x1a8>)
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fee9 	bl	8000850 <MCAL_GPIO_INIT_PIN>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	2000005c 	.word	0x2000005c
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000060 	.word	0x20000060
 8000a94:	20000064 	.word	0x20000064
 8000a98:	20000068 	.word	0x20000068
 8000a9c:	2000006c 	.word	0x2000006c
 8000aa0:	20000070 	.word	0x20000070
 8000aa4:	20000074 	.word	0x20000074
 8000aa8:	20000078 	.word	0x20000078
 8000aac:	2000007c 	.word	0x2000007c
 8000ab0:	20000080 	.word	0x20000080
 8000ab4:	20000084 	.word	0x20000084

08000ab8 <wait_ms>:



void wait_ms(uint32_t time){
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	uint32_t i=0,j=0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
	for(; i < time ; i++){
 8000ac8:	e008      	b.n	8000adc <wait_ms+0x24>
		for (; j < 255 ; j++);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	3301      	adds	r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	2bfe      	cmp	r3, #254	; 0xfe
 8000ad4:	d9f9      	bls.n	8000aca <wait_ms+0x12>
	for(; i < time ; i++){
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d3f5      	bcc.n	8000ad0 <wait_ms+0x18>
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <EXTI9_CALLBACK>:

void EXTI9_CALLBACK(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	LCD_WRITE_STRING("IRQ EXTI9 HAS  HAPPENDE _|-");
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <EXTI9_CALLBACK+0x1c>)
 8000af6:	f7ff fb91 	bl	800021c <LCD_WRITE_STRING>
	wait_ms(1000000);
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <EXTI9_CALLBACK+0x20>)
 8000afc:	f7ff ffdc 	bl	8000ab8 <wait_ms>
	LCD_WRITE_COMMAND(LCD_Clear_Display);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff fb5d 	bl	80001c0 <LCD_WRITE_COMMAND>

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	08000c04 	.word	0x08000c04
 8000b10:	000f4240 	.word	0x000f4240

08000b14 <main>:
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
	init();
 8000b1a:	f7ff fef7 	bl	800090c <init>
	LCD_INIT();
 8000b1e:	f7ff fb3e 	bl	800019e <LCD_INIT>
	EXTI_CONFIG_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 8000b22:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <main+0x34>)
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.TRIGGER_CASE = EXTI_CASE_RISING;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	763b      	strb	r3, [r7, #24]
	EXTI_CFG.P_IRQ_CALL_BACK = EXTI9_CALLBACK;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <main+0x38>)
 8000b34:	61fb      	str	r3, [r7, #28]
	EXTI_CFG.IRQ_EN = IRQ_ENABLE;
 8000b36:	2301      	movs	r3, #1
 8000b38:	767b      	strb	r3, [r7, #25]

	MCAL_EXTI_INIT(&EXTI_CFG);
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fbc0 	bl	80002c4 <MCAL_EXTI_INIT>


	while(1){
 8000b44:	e7fe      	b.n	8000b44 <main+0x30>
 8000b46:	bf00      	nop
 8000b48:	08000c20 	.word	0x08000c20
 8000b4c:	08000af1 	.word	0x08000af1

08000b50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b54:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b7e:	f000 f811 	bl	8000ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b82:	f7ff ffc7 	bl	8000b14 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   r0, =_estack
 8000b88:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b94:	08000c34 	.word	0x08000c34
  ldr r2, =_sbss
 8000b98:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b9c:	20000088 	.word	0x20000088

08000ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>
	...

08000ba4 <__libc_init_array>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	2600      	movs	r6, #0
 8000ba8:	4d0c      	ldr	r5, [pc, #48]	; (8000bdc <__libc_init_array+0x38>)
 8000baa:	4c0d      	ldr	r4, [pc, #52]	; (8000be0 <__libc_init_array+0x3c>)
 8000bac:	1b64      	subs	r4, r4, r5
 8000bae:	10a4      	asrs	r4, r4, #2
 8000bb0:	42a6      	cmp	r6, r4
 8000bb2:	d109      	bne.n	8000bc8 <__libc_init_array+0x24>
 8000bb4:	f000 f81a 	bl	8000bec <_init>
 8000bb8:	2600      	movs	r6, #0
 8000bba:	4d0a      	ldr	r5, [pc, #40]	; (8000be4 <__libc_init_array+0x40>)
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <__libc_init_array+0x44>)
 8000bbe:	1b64      	subs	r4, r4, r5
 8000bc0:	10a4      	asrs	r4, r4, #2
 8000bc2:	42a6      	cmp	r6, r4
 8000bc4:	d105      	bne.n	8000bd2 <__libc_init_array+0x2e>
 8000bc6:	bd70      	pop	{r4, r5, r6, pc}
 8000bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bcc:	4798      	blx	r3
 8000bce:	3601      	adds	r6, #1
 8000bd0:	e7ee      	b.n	8000bb0 <__libc_init_array+0xc>
 8000bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd6:	4798      	blx	r3
 8000bd8:	3601      	adds	r6, #1
 8000bda:	e7f2      	b.n	8000bc2 <__libc_init_array+0x1e>
 8000bdc:	08000c2c 	.word	0x08000c2c
 8000be0:	08000c2c 	.word	0x08000c2c
 8000be4:	08000c2c 	.word	0x08000c2c
 8000be8:	08000c30 	.word	0x08000c30

08000bec <_init>:
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	bf00      	nop
 8000bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf2:	bc08      	pop	{r3}
 8000bf4:	469e      	mov	lr, r3
 8000bf6:	4770      	bx	lr

08000bf8 <_fini>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	bf00      	nop
 8000bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfe:	bc08      	pop	{r3}
 8000c00:	469e      	mov	lr, r3
 8000c02:	4770      	bx	lr
