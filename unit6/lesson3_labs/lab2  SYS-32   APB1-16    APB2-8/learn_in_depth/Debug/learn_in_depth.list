
learn_in_depth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000020c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800033c  0800033c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800033c  0800033c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800033c  0800033c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800033c  0800033c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000348  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000348  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000121  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000f5  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00020248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00020290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000aa1  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000000f7  00000000  00000000  00020d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002e6d  00000000  00000000  00020e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00023cc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00023d40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000324 	.word	0x08000324

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000324 	.word	0x08000324

08000170 <main>:
	}pin;
}R_ODR_T;
volatile R_ODR_T* R_ODR= (volatile R_ODR_T*)(PortA_BASE + 0x0C);

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	RCC_CR |= (1 << 0); //HSI_RC ON ---> 8MHZ
 8000176:	4b3f      	ldr	r3, [pc, #252]	; (8000274 <main+0x104>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a3e      	ldr	r2, [pc, #248]	; (8000274 <main+0x104>)
 800017c:	f043 0301 	orr.w	r3, r3, #1
 8000180:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= ~(0b1111 << 18); //reset PLLMUL
 8000182:	4b3d      	ldr	r3, [pc, #244]	; (8000278 <main+0x108>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a3c      	ldr	r2, [pc, #240]	; (8000278 <main+0x108>)
 8000188:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800018c:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= ~(1 << 16); //enable PLL -> HSI/2 ---> 4MHZ
 800018e:	4b3a      	ldr	r3, [pc, #232]	; (8000278 <main+0x108>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a39      	ldr	r2, [pc, #228]	; (8000278 <main+0x108>)
 8000194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000198:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= (0b0110 << 18); //PLLMUL multiplied by 8 ---> 32MHZ
 800019a:	4b37      	ldr	r3, [pc, #220]	; (8000278 <main+0x108>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a36      	ldr	r2, [pc, #216]	; (8000278 <main+0x108>)
 80001a0:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80001a4:	6013      	str	r3, [r2, #0]
	RCC_CR |= (1 << 24); //PLLON
 80001a6:	4b33      	ldr	r3, [pc, #204]	; (8000274 <main+0x104>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a32      	ldr	r2, [pc, #200]	; (8000274 <main+0x104>)
 80001ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001b0:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= ~(0b11 << 0); //reset SW
 80001b2:	4b31      	ldr	r3, [pc, #196]	; (8000278 <main+0x108>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a30      	ldr	r2, [pc, #192]	; (8000278 <main+0x108>)
 80001b8:	f023 0303 	bic.w	r3, r3, #3
 80001bc:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= (0b10 << 0); //enable SW at PLLCLK ---> 32MHZ
 80001be:	4b2e      	ldr	r3, [pc, #184]	; (8000278 <main+0x108>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a2d      	ldr	r2, [pc, #180]	; (8000278 <main+0x108>)
 80001c4:	f043 0302 	orr.w	r3, r3, #2
 80001c8:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= ~(0x1111 << 4); //AHB divided by 1 ---> 32MHZ
 80001ca:	4b2b      	ldr	r3, [pc, #172]	; (8000278 <main+0x108>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a2a      	ldr	r2, [pc, #168]	; (8000278 <main+0x108>)
 80001d0:	f423 3388 	bic.w	r3, r3, #69632	; 0x11000
 80001d4:	f423 7388 	bic.w	r3, r3, #272	; 0x110
 80001d8:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= ~(0b111 << 8);  //reset APB1
 80001da:	4b27      	ldr	r3, [pc, #156]	; (8000278 <main+0x108>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a26      	ldr	r2, [pc, #152]	; (8000278 <main+0x108>)
 80001e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e4:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= (0b100 << 8);  //APB1 divided by 2 ---> 16MHZ
 80001e6:	4b24      	ldr	r3, [pc, #144]	; (8000278 <main+0x108>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a23      	ldr	r2, [pc, #140]	; (8000278 <main+0x108>)
 80001ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f0:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= ~(0b111 <<11); //reset APB2
 80001f2:	4b21      	ldr	r3, [pc, #132]	; (8000278 <main+0x108>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a20      	ldr	r2, [pc, #128]	; (8000278 <main+0x108>)
 80001f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80001fc:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= (0b101 << 11); //APB2 divided by 4 ---> 8MHZ
 80001fe:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <main+0x108>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <main+0x108>)
 8000204:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000208:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |=1<<2; //enable CLOCK
 800020a:	4b1c      	ldr	r3, [pc, #112]	; (800027c <main+0x10c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a1b      	ldr	r2, [pc, #108]	; (800027c <main+0x10c>)
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	6013      	str	r3, [r2, #0]
	GPIO_CRH    &=0xff0fffff;
 8000216:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <main+0x110>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a19      	ldr	r2, [pc, #100]	; (8000280 <main+0x110>)
 800021c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000220:	6013      	str	r3, [r2, #0]
	GPIO_CRH    |=0x00200000;
 8000222:	4b17      	ldr	r3, [pc, #92]	; (8000280 <main+0x110>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a16      	ldr	r2, [pc, #88]	; (8000280 <main+0x110>)
 8000228:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800022c:	6013      	str	r3, [r2, #0]

	while(1){
		R_ODR->pin.pin13=1;
 800022e:	4b15      	ldr	r3, [pc, #84]	; (8000284 <main+0x114>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	8813      	ldrh	r3, [r2, #0]
 8000234:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000238:	8013      	strh	r3, [r2, #0]
		for(int i=0;i<5000;i++);
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	e002      	b.n	8000246 <main+0xd6>
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3301      	adds	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f241 3287 	movw	r2, #4999	; 0x1387
 800024c:	4293      	cmp	r3, r2
 800024e:	ddf7      	ble.n	8000240 <main+0xd0>
		R_ODR->pin.pin13=0;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <main+0x114>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	8813      	ldrh	r3, [r2, #0]
 8000256:	f36f 334d 	bfc	r3, #13, #1
 800025a:	8013      	strh	r3, [r2, #0]
		for(int i=0;i<5000;i++);
 800025c:	2300      	movs	r3, #0
 800025e:	603b      	str	r3, [r7, #0]
 8000260:	e002      	b.n	8000268 <main+0xf8>
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	603b      	str	r3, [r7, #0]
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	f241 3287 	movw	r2, #4999	; 0x1387
 800026e:	4293      	cmp	r3, r2
 8000270:	ddf7      	ble.n	8000262 <main+0xf2>
		R_ODR->pin.pin13=1;
 8000272:	e7dc      	b.n	800022e <main+0xbe>
 8000274:	40021000 	.word	0x40021000
 8000278:	40021004 	.word	0x40021004
 800027c:	40021018 	.word	0x40021018
 8000280:	40010804 	.word	0x40010804
 8000284:	20000000 	.word	0x20000000

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	; (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	; (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 f811 	bl	80002dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff59 	bl	8000170 <main>

080002be <LoopForever>:

LoopForever:
    b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002cc:	08000344 	.word	0x08000344
  ldr r2, =_sbss
 80002d0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002d4:	20000020 	.word	0x20000020

080002d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC1_2_IRQHandler>
	...

080002dc <__libc_init_array>:
 80002dc:	b570      	push	{r4, r5, r6, lr}
 80002de:	2500      	movs	r5, #0
 80002e0:	4e0c      	ldr	r6, [pc, #48]	; (8000314 <__libc_init_array+0x38>)
 80002e2:	4c0d      	ldr	r4, [pc, #52]	; (8000318 <__libc_init_array+0x3c>)
 80002e4:	1ba4      	subs	r4, r4, r6
 80002e6:	10a4      	asrs	r4, r4, #2
 80002e8:	42a5      	cmp	r5, r4
 80002ea:	d109      	bne.n	8000300 <__libc_init_array+0x24>
 80002ec:	f000 f81a 	bl	8000324 <_init>
 80002f0:	2500      	movs	r5, #0
 80002f2:	4e0a      	ldr	r6, [pc, #40]	; (800031c <__libc_init_array+0x40>)
 80002f4:	4c0a      	ldr	r4, [pc, #40]	; (8000320 <__libc_init_array+0x44>)
 80002f6:	1ba4      	subs	r4, r4, r6
 80002f8:	10a4      	asrs	r4, r4, #2
 80002fa:	42a5      	cmp	r5, r4
 80002fc:	d105      	bne.n	800030a <__libc_init_array+0x2e>
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000304:	4798      	blx	r3
 8000306:	3501      	adds	r5, #1
 8000308:	e7ee      	b.n	80002e8 <__libc_init_array+0xc>
 800030a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030e:	4798      	blx	r3
 8000310:	3501      	adds	r5, #1
 8000312:	e7f2      	b.n	80002fa <__libc_init_array+0x1e>
 8000314:	0800033c 	.word	0x0800033c
 8000318:	0800033c 	.word	0x0800033c
 800031c:	0800033c 	.word	0x0800033c
 8000320:	08000340 	.word	0x08000340

08000324 <_init>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr

08000330 <_fini>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr
