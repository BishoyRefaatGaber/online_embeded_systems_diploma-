
interrupt_lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ba  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e7  00000000  00000000  00000ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_1>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_2>
   c:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init>:
#define INT_GICR *((volatile unsigned char *)(IO_BASE + 0x3B))
#define INT_SREG *((volatile unsigned char *)(IO_BASE + 0x3F))

void init (void){
	
	IO_DDRD |= (1 << 5);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	81 bb       	out	0x11, r24	; 17
	IO_DDRD |= (1 << 6);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 64       	ori	r24, 0x40	; 64
  76:	81 bb       	out	0x11, r24	; 17
	IO_DDRD |= (1 << 7);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	81 bb       	out	0x11, r24	; 17
	INT_MCUCR &= ~(0b00001111);
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	80 7f       	andi	r24, 0xF0	; 240
  82:	85 bf       	out	0x35, r24	; 53
	INT_MCUCR |= (0b00001101); //enable the control register ( INT1 -> rising , INT0 -> logic )
  84:	85 b7       	in	r24, 0x35	; 53
  86:	8d 60       	ori	r24, 0x0D	; 13
  88:	85 bf       	out	0x35, r24	; 53
	INT_MCUCSR &= ~(1 << 6);   // enable the control state register ( INT2 -> falling )
  8a:	84 b7       	in	r24, 0x34	; 52
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	84 bf       	out	0x34, r24	; 52
	INT_GICR |=(0b11100000);   //enable the interrupts ( INT0 , INT1 , INT2 )
  90:	8b b7       	in	r24, 0x3b	; 59
  92:	80 6e       	ori	r24, 0xE0	; 224
  94:	8b bf       	out	0x3b, r24	; 59
	INT_SREG |=(1 << 7); //enable state register
  96:	8f b7       	in	r24, 0x3f	; 63
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	8f bf       	out	0x3f, r24	; 63
  9c:	08 95       	ret

0000009e <main>:
	
}

void main(void){
	 init ();
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <init>
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x4>

000000a4 <__vector_1>:
}

 
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	//DDRD = 0xff;
	IO_PORTD |= (1 << 5);
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	84 e3       	ldi	r24, 0x34	; 52
  be:	9c e0       	ldi	r25, 0x0C	; 12
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__vector_1+0x1c>
  c8:	00 c0       	rjmp	.+0      	; 0xca <__vector_1+0x26>
  ca:	00 00       	nop
	_delay_ms(500);
	IO_PORTD &= ~(1 << 5);
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	8f 7d       	andi	r24, 0xDF	; 223
  d0:	82 bb       	out	0x12, r24	; 18
	
}
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	2f 91       	pop	r18
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	//DDRD = 0xff;
	IO_PORTD |= (1 << 6);
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	84 e3       	ldi	r24, 0x34	; 52
  fc:	9c e0       	ldi	r25, 0x0C	; 12
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <__vector_2+0x1c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_2+0x26>
 108:	00 00       	nop
	_delay_ms(500);
	IO_PORTD &= ~(1 << 6);
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	8f 7b       	andi	r24, 0xBF	; 191
 10e:	82 bb       	out	0x12, r24	; 18
}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
	//DDRD = 0xff;
	IO_PORTD |= (1 << 7);
 130:	82 b3       	in	r24, 0x12	; 18
 132:	80 68       	ori	r24, 0x80	; 128
 134:	82 bb       	out	0x12, r24	; 18
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	84 e3       	ldi	r24, 0x34	; 52
 13a:	9c e0       	ldi	r25, 0x0C	; 12
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <__vector_3+0x1c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <__vector_3+0x26>
 146:	00 00       	nop
	_delay_ms(500);
	IO_PORTD &= ~(1 << 7);
 148:	82 b3       	in	r24, 0x12	; 18
 14a:	8f 77       	andi	r24, 0x7F	; 127
 14c:	82 bb       	out	0x12, r24	; 18
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
